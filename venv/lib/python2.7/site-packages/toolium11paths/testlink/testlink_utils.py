# -*- coding: utf-8 -*-

# Copyright (c) Telef√≥nica Digital.
# CDO QA Team <qacdo@telefonica.com>


import ast
import logging

import requests
import testlink as testlink_sdk
from toolium.config_driver import get_error_message_from_exception
from toolium.config_files import ConfigFiles
from toolium.driver_wrappers_pool import DriverWrappersPool

# Dict to save tuples with TestLink keys and their test status
testlink_tests_status = {}

# TestLink configuration
enabled = None
execution_url = None
project_name = None
testplan_name = None
build = None
user = None
notes = None
custom_fields = {}
platform_name = ''

api_url = None
api_key = None


def testlink(test_key):
    """Decorator to update test status in Testlink

    :param test_key: test case key in Testlink
    :returns: testlink test
    """

    def decorator(test_item):
        def modified_test(*args, **kwargs):
            load_testlink_conf()
            try:
                test_item(*args, **kwargs)
            except Exception as e:
                error_message = get_error_message_from_exception(e)
                test_notes = "The test '{}' has failed: {}".format(args[0].get_method_name(), error_message)
                add_testlink_status([test_key], 'f', test_notes, None)
                raise
            add_testlink_status([test_key], 'p', None, None)

        modified_test.__name__ = test_item.__name__
        return modified_test

    return decorator


def load_testlink_conf():
    """
    Read TestLink configuration from properties file and save it
    """

    global enabled, execution_url, project_name, testplan_name, build, user, \
        notes, platform_name, custom_fields, api_url, api_key

    config = DriverWrappersPool.get_default_wrapper().config
    enabled = config.getboolean_optional('TestLink', 'enabled')
    execution_url = config.get_optional('TestLink', 'execution_url')
    project_name = config.get_optional('TestLink', 'project_name')
    testplan_name = config.get_optional('TestLink', 'testplan_name')
    build = config.get_optional('TestLink', 'build')
    user = config.get_optional('TestLink', 'user')
    notes = config.get_optional('TestLink', 'notes')
    platform_name = config.get_optional('TestLink', 'platform_name')
    custom_fields = get_custom_fields(config)

    testlink_host = config.get_optional('TestLink', 'api_host', None)
    if testlink_host:
        api_url = testlink_host + "/lib/api/xmlrpc/v1/xmlrpc.php"
        api_key = config.get_optional('TestLink', 'api_key')


def get_custom_fields(config):
    """
    Get custom fields from configuration and replace tags with configured browser or language values
    [BROWSER] tag will be replaced with '[Driver] type' value
    [LANGUAGE] tag will be replaced with '[TestExecution] language' value

    Configuration example:
        custom_fields: {'Browsers': '[BROWSER]', 'Idiomas': '[LANGUAGE]'}

    :param config: configuration object
    :returns: dict with custom fields
    """
    custom_fields = config.get_optional('TestLink', 'custom_fields')
    custom_fields_dict = {} if not custom_fields else ast.literal_eval(custom_fields)
    if 'Browser' in custom_fields_dict and custom_fields_dict['Browser'] == '[BROWSER]':
        testlink_browsers = {
            'iexplore': 'IE11',
            'edge': 'Edge',
            'firefox': 'Firefox',
            'chrome': 'Chrome',
            'safari': 'Safari'
        }
        try:
            custom_fields_dict['Browser'] = testlink_browsers[config.get('Driver', 'type').split('-')[0]]
        except KeyError:
            custom_fields_dict['Browser'] = ''
    if 'Language' in custom_fields_dict and custom_fields_dict['Language'] == '[LANGUAGE]':
        custom_fields_dict['Language'] = config.get_optional('TestExecution', 'language', '').title()
    return custom_fields_dict


def add_testlink_status(test_keys, test_status, test_notes, test_execution_time):
    """
    Save test status and comments to update TestLink later

    :param test_keys: (list) test case keys in TestLink
    :param test_status: test case status
    :param test_execution_time: test execution time
    """
    for test_key in test_keys:
        add_testlink_status_single_key(test_key, test_status, test_notes, test_execution_time)


def add_testlink_status_single_key(test_key, test_status, test_notes, test_execution_time):
    """
    Save test status and comments to update TestLink later

    :param test_key: test case key in TestLink
    :param test_status: test case status
    :param test_execution_time: test execution time
    """
    if test_key and enabled:
        if test_key in testlink_tests_status:
            # Merge data with previous test status
            previous_status = testlink_tests_status[test_key]
            test_status = 'p' if previous_status[1] == 'p' and test_status == 'p' else 'f'
            if previous_status[2] and test_notes:
                test_notes = '{}\n{}'.format(previous_status[2], test_notes)
            elif previous_status[2] and not test_notes:
                test_notes = previous_status[2]
            if test_execution_time:
                test_execution_time = '{}, {}'.format(previous_status[3], test_execution_time)

        if not test_notes:
            test_notes = "OK"

        # Add or update test status
        testlink_tests_status[test_key] = (test_key, test_status, test_notes, test_execution_time)


def change_all_testlink_status():
    """
    Iterate over all TestLink test cases, update their status in TestLink and clear the dictionary
    """
    for test_status in testlink_tests_status.values():
        create_test_execution(*test_status)
    testlink_tests_status.clear()


def create_test_execution(test_key, test_status, test_notes, test_execution_time):
    """
    Update test status in TestLink
    :param test_key: test case key in TestLink
    :param test_status: test case status
    :param test_execution_time: test execution time
    """
    logger = logging.getLogger(__name__)

    if not execution_url:
        logger.warning("Test Case '%s' can not be updated: execution_url is not configured", test_key)
        return

    logger.info("Updating Test Case '%s' in TestLink with status %s", test_key, test_status)
    composed_notes = notes
    if test_notes:
        composed_notes = '{}\n{}'.format(notes, test_notes) if notes else test_notes
    if test_execution_time:
        custom_fields['Exec duration (sec)'] = test_execution_time
    payload = {'project_name': project_name, 'operation': 'execution', 'tc_extid': test_key,
               'testplan_name': testplan_name, 'build': build, 'notes': composed_notes,
               'result': test_status, 'user': user, 'customfields': str(custom_fields), 'platform_name': platform_name}

    try:
        response = requests.get(execution_url, params=payload, verify=False)
    except Exception as e:
        logger.warning("Error updating Test Case '%s': %s", test_key, e)
        return

    if response.status_code >= 400:
        logger.warning("Error updating Test Case '%s': [%s] %s", test_key, response.status_code, response.raw)
    else:
        logger.debug("%s", response.content.decode().splitlines()[0])


def get_test_case_ids_in_test_plan_by_name(arg_testplan=None, arg_build=None, arg_platform_name=None):
    """
    Get the list of TestCases IDs (external IDs from TestLink) included in the given testplan, buld and platform.
    :param arg_testplan: TestPlan name
    :param arg_build: Build name
    :param arg_platform_name: Platform name
    :return: List of TestCases IDs belonging to the given TestPlan, Build and Platform
    """

    logger = logging.getLogger(__name__)

    # Configure logging. At this point, perhaps the DriverWrapper has not been initialize yet.
    from toolium11paths.behave.environment_project_structure import CONFIG_PROPERTIES_DIR, \
        CONFIG_PROPERTIES_CONF, CONFIG_PROPERTIES_CONF_LOCAL
    config_files = ConfigFiles()
    config_files.set_config_directory(CONFIG_PROPERTIES_DIR)
    config_files.set_config_properties_filenames(CONFIG_PROPERTIES_CONF, CONFIG_PROPERTIES_CONF_LOCAL)
    DriverWrappersPool.get_default_wrapper().configure(True, config_files)
    load_testlink_conf()

    if not all([api_url, api_key, arg_testplan or testplan_name, arg_build or build, arg_platform_name or platform_name]):
        raise Exception("Missing configuration properties into TestLink section (toolium.cfg). "
                        "Is 'api_host' and/or 'api_key' set?")

    testlink_client = testlink_sdk.TestLinkHelper(api_url, api_key).connect(testlink_sdk.TestlinkAPIClient)

    try:
        testplan_id = filter(lambda element: element['name'] == (arg_testplan or testplan_name),
                             testlink_client.getTestPlanByName(project_name, testplan_name))[0]["id"]
        build_id = filter(lambda element: element['name'] == (arg_build or build),
                          testlink_client.getBuildsForTestPlan(testplanid=testplan_id))[0]["id"]
        platform_id = filter(lambda element: element['name'] == (arg_platform_name or platform_name),
                             testlink_client.getTestPlanPlatforms(testplanid=testplan_id))[0]["id"]
        testcase_ids_list = map(lambda element: element[platform_id]['full_external_id'], testlink_client.getTestCasesForTestPlan(testplanid=testplan_id,buildid=build_id, platformid=platform_id).values())
    except:
        raise Exception("Testplan, build or platform not found: (%s, %s, %s). "
                        "Are there TestCases into the given TestPlan for the specified Build and Platform?" % testplan_name, build, platform_name)

    return testcase_ids_list
