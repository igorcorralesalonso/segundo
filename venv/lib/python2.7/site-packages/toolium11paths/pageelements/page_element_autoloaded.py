# -*- coding: utf-8 -*-

# Copyright 2016 Telef√≥nica Digital | ElevenPaths
# This file is part of Toolium11paths.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from toolium11paths.pageelements import PageElement


class PageElementAutoloaded(PageElement):
    """
    Class to represent a web or a mobile page element when it is auto-loaded
    from a specification file (YAML) dynamically in runtime.

    :type if_wait: (boolean) When it is true, the element is loaded always when the
    Page (container) is opened. Elements with these attribute to True can be used to
    determine when the Page is loaded/ready. By default is False.
    """

    def __init__(self, by, value, parent=None):
        """Initialize the PageElement object with the given locator components.

        If parent is not None, find_element will be performed over it, instead of
        using the driver's method, so it can find nested elements.

        :param by: locator type
        :param value: locator value
        :param parent: parent element (WebElement, PageElement or locator tuple)
        """
        super(PageElementAutoloaded, self).__init__(by, value, parent=None)

        self.if_wait = False
