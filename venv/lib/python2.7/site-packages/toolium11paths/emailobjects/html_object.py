# -*- coding: utf-8 -*-

# Copyright 2016 Telef√≥nica Digital | ElevenPaths
# This file is part of Toolium11paths.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from .beautifulsoup_xpath import BSXPathEvaluator


class HTMLObject(BSXPathEvaluator):
    """
    HTMLObject extends BeautifulSoup for supporting toolium interface.

    https://www.crummy.com/software/BeautifulSoup/bs4/doc/
    """

    def __init__(self, html_string, **kwargs):
        super(HTMLObject, self).__init__(html_string, "html.parser", **kwargs)

    def find_element_by_id(self, id_):
        """Finds an element by id.
        :Args:
         - id\_ - The id of the element to be found.
        :Usage:
            html.find_element_by_id('foo')
        """
        return self.find(id=id_)

    def find_elements_by_id(self, id_):
        """
        Finds multiple elements by id.
        :Args:
         - id\_ - The id of the elements to be found.
        :Usage:
            html.find_elements_by_id('foo')
        """
        return self.find_all(id=id_)

    def find_element_by_name(self, name):
        """
        Finds an element by name.
        :Args:
         - name: The name of the element to find.
        :Usage:
            html.find_element_by_name('foo')
        """
        return self.find(attrs={"name": name})

    def find_elements_by_name(self, name):
        """
        Finds elements by name.
        :Args:
         - name: The name of the elements to find.
        :Usage:
            html.find_elements_by_name('foo')
        """
        return self.find_all(attrs={"name": name})

    def find_element_by_xpath(self, xpath):
        """
        Finds an element by xpath.
        :Args:
         - xpath - The xpath locator of the element to find.
        :Usage:
            html.find_element_by_xpath('//div/td[1]')
        """
        return self.evaluate(xpath)

    def find_elements_by_xpath(self, xpath):
        """
        Finds multiple elements by xpath.
        :Args:
         - xpath - The xpath locator of the elements to be found.
        :Usage:
            html.find_elements_by_xpath("//div[contains(@class, 'foo')]")
        """
        return self.evaluate_list(xpath)
