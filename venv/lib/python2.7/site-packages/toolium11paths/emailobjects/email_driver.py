# -*- coding: utf-8 -*-

# Copyright 2016 Telef√≥nica Digital | ElevenPaths
# This file is part of Toolium11paths.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import poplib
import quopri
import re
from email import parser

from .email_object import EmailObject


def _get_encoding(mail_subject):
    encoding = re.match("=\?(.+)\?Q\?.*", mail_subject)
    return encoding.group(1) if encoding else u"utf-8"


def _decode_mail_subject(mail_subject):
    return quopri.decodestring(mail_subject, header=True).decode(_get_encoding(mail_subject))


def _filter_mails_by_subject(mails, subject):
    filter_mails = []
    if subject is not None:
        for mail in mails:
            if _decode_mail_subject(mail.subject) == subject:
                filter_mails.append(mail)
    return filter_mails


def _filter_mails_by_subject__contains(mails, subject_part):
    filter_mails = []
    if subject_part is not None:
        for mail in mails:
            if subject_part in _decode_mail_subject(mail.subject):
                filter_mails.append(mail)
    return filter_mails


class PopDriver(object):
    """
    Allows you to control a mail account.
    """
    server = None

    def __init__(self, user=None, password=None, pop_server=None):
        if pop_server is not None:
            self.server = pop_server
        self.user = user
        self.password = password
        self.email_object = None

    def _pop_last_mails(self, max_mails=10):
        """
        Retrieve mails from pop server.
        :param max_mails: maximum number of mails to retrieve. Set value to None or 0 to retrieve all mails.
        :return: (list) of email messages
        """
        pop_conn = poplib.POP3_SSL(self.server)
        pop_conn.user(self.user)
        pop_conn.pass_(self.password)
        # Get messages from server:
        pop_list_len = len(pop_conn.list()[1])
        mails_to_retrieve = max_mails if max_mails and max_mails < pop_list_len else pop_list_len
        messages = [pop_conn.retr(i) for i in range(pop_list_len, pop_list_len - mails_to_retrieve, -1)]
        # Concat message pieces:
        messages = ["\n".join(msg[1]) for msg in messages]
        # Parse message intom an email object:
        messages = [parser.Parser().parsestr(msg) for msg in messages]
        pop_conn.quit()
        return messages

    def get_last_mails(self):
        messages = self._pop_last_mails()
        return [EmailObject(msg) for msg in messages]

    def get_email_by_position(self, position, subject=None, subject__contains=None):
        mails = self.get_last_mails()
        if subject is not None:
            mails = _filter_mails_by_subject(mails, subject)
        if subject__contains is not None:
            mails = _filter_mails_by_subject__contains(mails, subject__contains)
        if mails:
            return mails[int(position)]
        return None

    def get_last_email(self, subject=None, subject__contains=None):
        return self.get_email_by_position(0, subject, subject__contains)

    def get(self, subject=None, subject__contains=None):
        mails = self.get_last_mails()
        if subject is not None:
            mails = _filter_mails_by_subject(mails, subject)
        if subject__contains is not None:
            mails = _filter_mails_by_subject__contains(mails, subject__contains)
        if mails:
            # Get first object of the emailObject list instead of the last one 'mails[-1]'
            self.email_object = mails[0]
        else:
            self.email_object = None

    def find_element_by_id(self, id_):
        """
        Finds an element by id.
        :Args:
         - id\_ - The id of the element to be found.
        :Usage:
            driver.find_element_by_id('foo')
        """
        return self.email_object.html.find_element_by_id(id_)

    def find_elements_by_id(self, id_):
        """
        Finds multiple elements by id.
        :Args:
         - id\_ - The id of the elements to be found.
        :Usage:
            html.find_elements_by_id('foo')
        """
        return self.email_object.html.find_elements_by_id(id_)

    def find_element_by_name(self, name):
        """
        Finds an element by name.
        :Args:
         - name: The name of the element to find.
        :Usage:
            html.find_element_by_name('foo')
        """
        return self.email_object.html.find_element_by_name(name)

    def find_elements_by_name(self, name):
        """
        Finds elements by name.
        :Args:
         - name: The name of the elements to find.
        :Usage:
            driver.find_elements_by_name('foo')
        """
        return self.email_object.html.find_elements_by_name(name)

    def find_element_by_xpath(self, xpath):
        """
        Finds an element by xpath.
        :Args:
         - xpath - The xpath locator of the element to find.
        :Usage:
            driver.find_element_by_xpath('//div/td[1]')
        """
        return self.email_object.html.find_element_by_xpath(xpath)

    def find_elements_by_xpath(self, xpath):
        """
        Finds multiple elements by xpath.
        :Args:
         - xpath - The xpath locator of the elements to be found.
        :Usage:
            driver.find_elements_by_xpath("//div[contains(@class, 'foo')]")
        """
        return self.email_object.html.find_elements_by_xpath(xpath)


class Office365Driver(PopDriver):
    """
    Allows you to control an Office365 mail account.
    """
    server = "outlook.office365.com"


class GmailDriver(PopDriver):
    """
    Allows you to control a Gmail account.
    """
    server = "pop.gmail.com"


class OutlookDriver(PopDriver):
    """
    Allows you to control an Outlook/hotmail account.
    """
    server = "pop-mail.outlook.com"
