# -*- coding: utf-8 -*-

"""
Copyright (c) Telefonica Digital.
ElevenPaths QA Team <qateam@11paths.com>
"""

import functools
from behave import given as behave_given, when as behave_when, then as behave_then, step as behave_step
from toolium11paths.utils.configuration import map_param, table_set_map_params
from toolium11paths.utils.dataset import prepare_param

__all__ = [
    'configure_params', 'given', 'when', 'then', 'step'
]


def configure_params(func):
    """
    Behave step decorator for preparing and mapping params from settings.
    """
    @functools.wraps(func)
    def func_wrapper(context, *args, **kwargs):
        if context:
            table_set_map_params(context.table, context, False)
            if hasattr(context, 'text') and context.text is not None:
                context.text = map_param(prepare_param(context.text, False), context)
        new_args = [map_param(prepare_param(arg, False)) for arg in args]
        new_kwargs = {arg: map_param(prepare_param(kwargs[arg], False, (context.language if context else 'es')), context) for arg in kwargs}
        return func(context, *new_args, **new_kwargs)
    return func_wrapper


class step(object):
    """
    Behave step decorator with some toolium11paths magic.

        - Prepare and map params from settings.
    """
    def __init__(self, step_text):
        self.step_text = step_text

    def __call__(self, f):
        @functools.wraps(f)
        def wrapped_f(context, *args, **kwargs):
            return configure_params(f)(context, *args, **kwargs)

        return behave_step(self.step_text)(wrapped_f)


class given(object):
    """
    Behave given decorator with some toolium11paths magic.

        - Prepare and map params from settings.
    """
    def __init__(self, step_text):
        self.step_text = step_text

    def __call__(self, f):
        @functools.wraps(f)
        def wrapped_f(context, *args, **kwargs):
            return configure_params(f)(context, *args, **kwargs)

        return behave_given(self.step_text)(wrapped_f)


class when(object):
    """
    Behave when decorator with some toolium11paths magic.

        - Prepare and map params from settings.
    """
    def __init__(self, step_text):
        self.step_text = step_text

    def __call__(self, f):
        @functools.wraps(f)
        def wrapped_f(context, *args, **kwargs):
            return configure_params(f)(context, *args, **kwargs)

        return behave_when(self.step_text)(wrapped_f)


class then(object):
    """
    Behave then decorator with some toolium11paths magic.

        - Prepare and map params from settings.
    """
    def __init__(self, step_text):
        self.step_text = step_text

    def __call__(self, f):
        @functools.wraps(f)
        def wrapped_f(context, *args, **kwargs):
            return configure_params(f)(context, *args, **kwargs)

        return behave_then(self.step_text)(wrapped_f)
