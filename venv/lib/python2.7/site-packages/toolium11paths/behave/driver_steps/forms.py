# -*- coding: utf-8 -*-

"""
Copyright (c) Telefonica Digital.
ElevenPaths QA Team <qateam@11paths.com>
"""

import os
# noinspection PyUnresolvedReferences
from behave import step as behave_step
from bs4 import Tag

from selenium.webdriver.common.by import By

from toolium11paths.behave import step
from toolium11paths.behave.driver_steps.asserts import _format_text

__all__ = ('fill_in_form_with_value', 'select_option_by_visible_text',
           'select_option_by_value', 'check_the_box', 'uncheck_the_box', 'clear_field',
           'focus_over_element', 'store_in_context', 'store_table_structure', 'store_attr_value')


@step(u'I fill in "{field}" field from "{resource}" page with "{value}"')
@step(u'I fill in "{field}" field from "{resource}" page with "{value}" and params')
def fill_in_form_with_value(context, field, resource, value):

    value = _format_text(context, value)
    context.page = context.get_page_object(resource)

    # Type field
    element = context.get_element_from_current_page(field)
    element.text = unicode(value)

    # Finally, variable is saved in context.filled_values to check values in further steps.
    # (e.g: context.filled_values['username'])
    context.filled_values.update({field: value})


@step(u'I fill in "{field}" field with "{value}"')
@step(u'I fill in "{field}" field with "{value}" and params')
def fill_in_form_with_value(context, field, value):

    value = _format_text(context, value)

    # Type field
    element = context.get_element_from_current_page(field)
    element.text = unicode(value)

    # Finally, variable is saved in context.filled_values to check values in further steps.
    # (e.g: context.filled_values['username'])
    context.filled_values.update({field: value})


@step(u'I fill in "{field}" field with this text')
def fill_in_form_with_text(context, field):
    """
    Fill an input with the defined multiline text.

    :param context: Behave context
    :param field: WebElement name
    """
    fill_in_form_with_value(context, field, context.text)


@step(u'I fill in "{field}" field from "{resource}" page with this text')
def fill_in_form_with_text(context, field, resource):
    """
    Fill an input from specified page with the defined multiline text.

    :param context: Behave context
    :param field: WebElement name
    :param resource: Page which contains the field
    """
    fill_in_form_with_value(context, field, resource, context.text)


@step(u'I fill in "{field}" field with file path "{file_path}"')
def fill_field_with_file_path(context, field, file_path):
    """
    Hack-Step to force an input[type=file] element to be visible to allow to fill with file path

    :param context: Behave context
    :param field: WebElement name
    :param file_path: File path to upload
    """
    element = context.get_element_from_current_page(field)
    element_visible = element.is_visible()

    if not element_visible:
        context.driver.execute_script("arguments[0].style.display = 'block';", element.web_element)

    fill_in_form_with_value(context, field, file_path if os.path.isabs(file_path) else os.path.abspath(file_path))

    if not element_visible:
        context.driver.execute_script("arguments[0].style.display = 'none';", element.web_element)


@step(u'I select "{option_text}" option from "{element_name}" field')
def select_option_by_visible_text(context, option_text, element_name):
    """
    Step. Selects an option by the visible text displayed in the combo.

    :param context: Behave Context.
    :param option_text: Visible text to be selected.
    :param element_name: WebElement name.
    """
    option_text = unicode(option_text)

    element = context.get_element_from_current_page(element_name)
    element.option = option_text


@step(u'I select "{option_value}" option by value from "{element_name}" field')
def select_option_by_value(context, option_value, element_name):
    """
    Step. Selects an option by the item value.

    :param context: Behave Context.
    :param option_value: Value of the item to be selected.
    :param element_name: WebElement name.
    """
    option_value = unicode(option_value)

    element = context.get_element_from_current_page(element_name)
    element.selenium_select.select_by_value(option_value)


@step(u'I check the box "{element_name}"')
def check_the_box(context, element_name):
    """
    Step. Checks the box (checkbox) of the given WebElement name.

    :param context: Behave Context.
    :param element_name: WebElement name.
    """
    element = context.get_element_from_current_page(element_name)
    element.check()


@step(u'I uncheck the box "{element_name}"')
def uncheck_the_box(context, element_name):
    """
    Step. Unchecks the box (checkbox) of the given WebElement name.

    :param context: Behave Context.
    :param element_name: WebElement name.
    """
    element = context.get_element_from_current_page(element_name)
    element.uncheck()


@step(u'I clear "{field}" input value')
def clear_field(context, field):
    element = context.get_element_from_current_page(field)
    element.clear()


@step(u'I put the focus over the element "{element_name}"')
def focus_over_element(context, element_name):
    """
    Step. Sets the focus over the element {element_name}.

    :param element_name: Name of the element to be focused.
    """
    element = context.get_element_from_current_page(element_name)
    element.set_focus()


@step(u'I store the text in "{element_name}" in the context storage with key "{key}"')
def store_in_context(context, element_name, key):
    """
    Step. Saves a key-value pair in the context storage.

    :param element_name: Name of the text element to be read.
    :param key: The name that will be used to reference the value.
    """
    context.storage[key] = context.get_element_from_current_page(element_name).text


@step(u'I store table "{table}" structure in "{key}"')
def store_table_structure(context, table, key):
    """
    Step. Saves a key-value pair in the context storage with table structure

    :param context: Behave context
    :param table: table element
    :param key: The name that will be used to reference the value.
    """
    rows = context.get_element_from_current_page(table).web_element.find_elements(By.TAG_NAME, u'tr')

    table_rows = []
    for tr in rows:
        cells = tr.find_elements(By.CSS_SELECTOR, u'td, th')
        row_cells = []

        for cell in cells:
            row_cells.append(cell.text)

        table_rows.append(row_cells)

    context.storage[key] = table_rows


@step(u'I store the attribute "{attribute}" value in "{element_name}" in the context storage with key "{key}"')
def store_attr_value(context, attribute, element_name, key):
    """
    Step. Saves a key-value pair in the context storage. with the value of an attribute

    :param context: Behave context
    :param attribute: Name of the attribute to be read
    :param element_name: Name of the text element with the attribute
    :param key: The name that will be used to reference the value.
    """
    element = context.get_element_from_current_page(element_name)

    if isinstance(element, Tag):
        attribute_value = element.get(attribute)
    else:
        attribute_value = element.get_attribute(attribute)

    context.storage[key] = attribute_value
