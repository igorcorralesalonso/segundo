# -*- coding: utf-8 -*-

"""
Copyright (c) Telefonica Digital.
ElevenPaths QA Team <qateam@11paths.com>
"""

# noinspection PyUnresolvedReferences
from behave import step as behave_step
from selenium.common.exceptions import TimeoutException

from toolium11paths.behave import step

__all__ = ('navigate_to_url', 'set_up_browser_size', 'go_back_previous_page', 'delete_cookies', 'get_cookies',
           'refresh_browser', 'go_to_url', 'save_base_url', 'go_to_resource', 'go_to_bottom_page', 'go_to_top_page',
           'url_is', 'url_is_not')


# Navigation steps

@step(u'I navigate to the "{url}" service url for "{resource}" web page')
def navigate_to_url(context, url, resource):
    # Check if the value of the param is a 'config mask' and get its real value in this case and prepare dataset
    context.url = url

    # Set up correct PageObject depending on the resource accessed by the user
    context.page = context.get_page_object(resource)

    # Navigate to the expected url
    go_to_url(context, context.url)


@step(u'the base url "{base_url}"')
def save_base_url(context, base_url):
    context.url = base_url


@step(u'I go to "{url_resource}" resource for "{resource}" web page')
def go_to_resource(context, url_resource, resource):
    # Set up correct PageObject depending on the resource accessed by the user
    context.page = context.get_page_object(resource)

    # Configure new resource to be accessed given the base_url
    context.url = context.url + url_resource

    # Navigate to the expected url
    go_to_url(context, context.url)


@step(u'I go to "{url}" web page')
def go_to_url(context, url):
    context.driver.get(url)

    # Avoid certificate checking if necessary
    if context.driver.title in [u'Certificate Error: Navigation Blocked', u'This site isn’t secure',
                                u'Error de certificado: navegación bloqueada', u'Este sitio no es seguro.']:
        context.driver.execute_script("document.getElementById('overridelink').click();")


@step(u'I go back to previous page')
def go_back_previous_page(context):
    context.driver.execute_script("window.history.go(-1)")


@step(u'I refresh browser')
def refresh_browser(context):
    context.driver.refresh()


# Web browser configuration steps

@step(u'I set up browser width to "{width}" and height to "{height}"')
def set_up_browser_size(context, width, height):
    context.driver.set_window_size(int(width), int(height))


# Cookies management steps

@step(u'I delete cookies')
def delete_cookies(context):
    cookies = context.driver.get_cookies()
    context.logger.info("Cookies list: %s", cookies)

    try:
        context.driver.delete_all_cookies()
    except Exception as e:
        context.logger.warn("No cookies deleted: %s", str(e))


@step(u'I get cookies')
def get_cookies(context):
    context.cookies = context.driver.get_cookies()


@step(u'I scroll to the bottom of the page')
def go_to_bottom_page(context):
    context.driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")


@step(u'I scroll to the top of the page')
def go_to_top_page(context):
    context.driver.execute_script("window.scrollTo(0, 0);")


@step(u'current URL is "{url}"')
@step(u'current URL is "{url}" after "{seconds:d}" seconds')
def url_is(context, url, seconds=10):
    try:
        url_match = context.utils.wait_until_url_is(url, seconds)
    except TimeoutException:
        url_match = False

    assert url_match, u'Current url is not "{expected}". Current: {current}'.format(expected=url,
                                                                                    current=context.driver.current_url)


@step(u'current URL is not "{url}"')
@step(u'current URL is not "{url}" after "{seconds:d}" seconds')
def url_is_not(context, url, seconds=10):
    try:
        url_match = context.utils.wait_until_url_is(url, seconds, equals=False)
    except TimeoutException:
        url_match = False

    assert url_match, u'Current is still "{expected}".'.format(expected=url)
