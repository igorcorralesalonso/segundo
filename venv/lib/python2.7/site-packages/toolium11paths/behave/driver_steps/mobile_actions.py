# -*- coding: utf-8 -*-

"""
Copyright (c) Telefonica Digital.
ElevenPaths QA Team <qateam@11paths.com>
"""

import time

from appium.webdriver.common.touch_action import TouchAction

# noinspection PyUnresolvedReferences
from behave import step as behave_step
from toolium11paths.behave import step

WAIT = 100
ZERO = 0
HALF = 2
COORDINATE_X = 10
TIME_SWIPE_IOS = 100
TIME_SWIPE_AND = 2000
CONTEXT_NATIVE_APP = "NATIVE_APP"
WEBVIEW_ANDROID = "WEBVIEW"
WEBVIEW_IOS = "WEBVIEW_"

__all__ = ('launch_app', 'close_app', 'run_background_app', 'press', 'long_press', 'accept_alert', 'dismiss_alert',
           'swipe_left_right', 'swipe_right_left', 'display_springboard', 'hide_keyboard', 'switch_the_context')


@step(u'launch the app')
def launch_app(context):
    """
    Step. Start the application specified in the desired capabilities.

    :param context: Behave Context.
    """
    context.driver.launch_app()


@step(u'close the app')
def close_app(context):
    """
    Step. Close the application specified in the desired capabilities.

    :param context: Behave Context.
    """
    context.driver.close_app()


@step(u'run in the background "{seconds:d}" seconds the app')
def run_background_app(context, seconds):
    """
    Step. Puts the application in the background for a certain duration.

    :param context: Behave Context.
    :param seconds: The duration for the application to remain in the background.
    """
    context.driver.background_app(seconds)


@step(u'I press in x "{x}" coordinates and y "{y}" coordinates')
def press(context, x, y):
    """
    Step. Begin a chain with a press down action at a particular position.

    :param context: Behave Context.
    :param x: X coordinate to press.
    :param y: Y coordinate to press.
    """
    action = TouchAction(context.driver)

    action \
        .press(x=x, y=y) \
        .wait(ms=WAIT) \
        .release()
    action.perform()


@step(u'I long press in x "{x}" coordinates and y "{y}" coordinates')
def long_press(context, x, y):
    """
    Step. Begin a chain with a long press down action at a particular position.

    :param context: Behave Context.
    :param x: X coordinate to long press.
    :param y: Y coordinate to long press.
    """
    action = TouchAction(context.driver)

    action \
        .long_press(x=x, y=y) \
        .wait(ms=WAIT) \
        .release()
    action.perform()


@step(u'I accept the alert')
def accept_alert(context):
    """
    Step. Accepts the alert available.
    :param context: Behave Context.
    """
    context.driver.switch_to.alert.accept()


@step(u'I dismiss the alert')
def dismiss_alert(context):
    """
    Step. Dismiss the alert available.
    :param context: Behave Context.
    """
    context.driver.switch_to.alert.dismiss()


@step(u'I do "{number:d}" swipes from right to left')
def swipe_right_left(context, number):
    """
    Step. Performing a particular number of swipes from right to left

    :param context: Behave Context.
    :param number: Number of times to perform the swipe
    """
    size = context.driver.get_window_size()

    start_x = size["width"] - COORDINATE_X
    start_y = size["height"] / HALF
    end_x = start_x / COORDINATE_X

    for i in range(number):
        if context.driver_wrapper.is_android_test():
            context.driver.swipe(start_x=start_x, start_y=start_y, end_x=end_x, end_y=start_y, duration=TIME_SWIPE_AND)
            time.sleep(1)
        else:
            context.driver.swipe(start_x=start_x, start_y=start_y, end_x=-start_x, end_y=start_y,
                                 duration=TIME_SWIPE_IOS)


@step(u'I do "{number:d}" swipes from left to right')
def swipe_left_right(context, number):
    """
    Step. Performing a particular number of swipes from left to right

    :param context: Behave Context.
    :param number: Number of times to perform the swipe
    """
    size = context.driver.get_window_size()

    end_x = size["width"] - COORDINATE_X
    start_y = size["height"] / HALF
    start_x = size["width"] / COORDINATE_X

    for i in range(number):
        if context.driver_wrapper.is_android_test():
            context.driver.swipe(start_x=start_x, start_y=start_y, end_x=end_x, end_y=start_y, duration=TIME_SWIPE_AND)
            time.sleep(1)
        else:
            context.driver.swipe(start_x=start_x, start_y=start_y, end_x=end_x - start_x, end_y=ZERO,
                                 duration=TIME_SWIPE_IOS)


@step(u'display the springboard settings in iOS')
def display_springboard(context):
    """
    Step. Displays the springboard settings in iOS

    :param context: Behave Context.
    """
    size = context.driver.get_window_size()

    start_x = size["width"] / HALF
    start_y = size["height"]
    end_y = - start_y
    context.driver.swipe(start_x=start_x, start_y=start_y, end_x=start_x, end_y=end_y, duration=TIME_SWIPE_IOS)

    context.execute_steps(u"""
        Given I do "1" swipes from right to left
        And I do "1" swipes from left to right
    """)

    time.sleep(1)


@step(u'I hide the keyboard')
def hide_keyboard(context):
    """
    Step. Hide the keyboard on the device

    :param context: Behave Context.
    """
    if context.driver_wrapper.is_ios_test():
        size = context.driver.get_window_size()
        position_x = size["width"] / HALF
        position_y = size["height"] / COORDINATE_X
        press(context, position_x, position_y)
    else:
        context.driver.hide_keyboard()


@step(u'switch to the NATIVE_APP context')
@step(u'switch to the WEBVIEW context')
def switch_the_context(context):
    """
    Step. Change native context to webview and vice versa.
    """
    if context.driver.context == CONTEXT_NATIVE_APP:
        time.sleep(3)
        if context.driver_wrapper.is_android_test():
            context.driver.switch_to.context(WEBVIEW_ANDROID)
        else:
            context.driver.switch_to.context(WEBVIEW_IOS)
    else:
        context.driver.switch_to.context(CONTEXT_NATIVE_APP)
