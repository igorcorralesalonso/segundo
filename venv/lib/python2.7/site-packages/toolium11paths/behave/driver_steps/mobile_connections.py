# -*- coding: utf-8 -*-

"""
Copyright (c) Telefonica Digital.
ElevenPaths QA Team <qateam@11paths.com>
"""

from appium.webdriver.connectiontype import ConnectionType

# noinspection PyUnresolvedReferences
from behave import step as behave_step
from toolium11paths.behave import step

__all__ = ('turn_on_wifi', 'turn_off_wifi', 'turn_on_airplane_mode', 'turn_off_airplane_mode',
           'turn_off_mobile_data_wifi_android')


@step(u'turn off mobile data android device')
@step(u'turn on wifi')
def turn_on_wifi(context):
    if context.driver_wrapper.is_android_test():
        context.driver.set_network_connection(ConnectionType.WIFI_ONLY)
    else:
        # TODO implementation for iOS device
        pass


@step(u'turn on mobile data android device')
@step(u'turn off wifi')
def turn_off_wifi(context):
    if context.driver_wrapper.is_android_test():
        context.driver.set_network_connection(ConnectionType.DATA_ONLY)
    else:
        # TODO implementation for iOS device
        pass


@step(u'turn on airplane mode')
def turn_on_airplane_mode(context):
    if context.driver_wrapper.is_android_test():
        context.driver.set_network_connection(ConnectionType.AIRPLANE_MODE)
    else:
        # TODO implementation for iOS device
        pass


@step(u'turn off airplane mode')
def turn_off_airplane_mode(context):
    if context.driver_wrapper.is_android_test():
        context.driver.set_network_connection(ConnectionType.ALL_NETWORK_ON)
    else:
        # TODO implementation for iOS device
        pass


@step(u'turn off mobile data and wifi android device')
def turn_off_mobile_data_wifi_android(context):
    context.driver.set_network_connection(ConnectionType.NO_CONNECTION)
