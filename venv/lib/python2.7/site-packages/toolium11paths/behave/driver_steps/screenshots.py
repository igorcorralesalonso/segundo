# -*- coding: utf-8 -*-

"""
Copyright (c) Telefonica Digital.
ElevenPaths QA Team <qateam@11paths.com>
"""

from behave import step

__all__ = ('gui_page_check', 'gui_page_check_threshold',
           'gui_page_after_invalid_check', 'gui_page_after_invalid_check_threshold')


JS_ITERATIONS = "return Math.round((document.body.scrollHeight / innerHeight) + 0.5)"

@step(u'the GUI of the "{resource}" page is the expected one')
def gui_page_check(context, resource):
    """
    Checks if the actual GUI is equal to the expected resource page screenshot

    :param context: behave context
    :param resource: resource page name
    """
    gui_page_check_threshold(context, resource, threshold=0)


@step(u'the GUI of the "{resource}" page is the expected one (threshold = "{threshold}")')
def gui_page_check_threshold(context, resource, threshold):
    """
    Checks if the actual GUI is almost equal to the expected resource page screenshot. The difference between both
    images should be less than the given threshold.

    :param context: behave context
    :param resource: resource page name
    :param threshold: percentage threshold for triggering a test failure (value between 0 and 1)
    """
    if context.driver_wrapper.is_mobile_test():
        context.assert_full_screenshot('%s_fullpage' % resource, threshold=float(threshold))
    else:
        gui_page_check_with_scroll(context, resource, threshold=threshold)


@step(u'the GUI of the "{resource}" page is the expected one without checking the elements')
def gui_page_after_invalid_check(context, resource):
    """
    Checks if the actual GUI is equal to the expected resource page screenshot excluding elements listed in the table

    Table example:
        | element_name |
        | elem1        |
        | ...          |

    Headers:
        :Header element_name: Element name.

    :param context: behave context
    :param resource: resource page name
    """
    gui_page_after_invalid_check_threshold(context, resource, threshold=0)


@step(u'the GUI of the "{resource}" page is the expected one without checking the elements (threshold = "{threshold}")')
def gui_page_after_invalid_check_threshold(context, resource, threshold):
    """
    Checks if the actual GUI is almost equal to the expected resource page screenshot excluding elements listed in the
    table. The difference between both images should be less than the given threshold.

    Table example:
        | element_name |
        | elem1        |
        | ...          |

    Headers:
        :Header element_name: Element name.

    :param context: behave context
    :param resource: resource page name
    :param threshold: percentage threshold for triggering a test failure (value between 0 and 1)
    """
    exclude_element_list = [
        context.get_element_from_current_page(row['element_name']) for row in context.table
    ]

    # Assert the full screen excluding some elements

    if context.driver_wrapper.is_mobile_test():
        context.assert_full_screenshot('%s_partialpage' % resource, threshold=float(threshold),
                                       exclude_elements=exclude_element_list)
    else:
        gui_page_check_with_scroll(context, resource, threshold=threshold,
                                   exclude_elements=exclude_element_list)


def gui_page_check_with_scroll(context, resource, threshold=0, exclude_elements=[]):
    """
    Checks if the actual GUI is almost equal to the expected resource page screenshot excluding elements listed in the
    table. The difference between both images should be less than the given threshold. Additionally,
    it performs N scrolls via Javascript to compare the entire web page

    :param context: behave context
    :param resource: resource page name
    :param threshold: percentage threshold for triggering a test failure (value between 0 and 1)
    :param exclude_elements: list of web elements to exclude from the screenshot
    """
    page_type = 'partialpage' if len(exclude_elements) > 0 else 'fullpage'

    for i in range(context.driver.execute_script(JS_ITERATIONS)):
        i_resource = "{resource}_{i}".format(resource=resource, i=i)

        context.driver.execute_script("scrollTo(0, innerHeight * {i})".format(i=i))
        context.assert_full_screenshot('%s_%s' % (i_resource, page_type), threshold=float(threshold),
                                       exclude_elements=exclude_elements)
