# -*- coding: utf-8 -*-

"""
Copyright (c) Telefonica Digital.
ElevenPaths QA Team <qateam@11paths.com>
"""

import time

from selenium.common.exceptions import TimeoutException
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait

# noinspection PyUnresolvedReferences
from behave import step as behave_step
from toolium11paths.behave import step
from toolium11paths.behave.driver_steps.asserts import _format_text

__all__ = ('resource_page_is_loaded', 'resource_is_visible', 'wait_n_seconds',
           'page_is_loaded','table_elements_displayed', 'resource_is_not_visible')


@step(u'the page is loaded')
def page_is_loaded(context):
    # Check if certain elements of the new PageObject are loaded
    context.page.wait_until_loaded()


@step(u'the "{resource}" page is loaded')
def resource_page_is_loaded(context, resource):
    context.page = context.get_page_object(resource)

    # Check if certain elements of the new PageObject are loaded
    context.page.wait_until_loaded()


@step(u'I wait {seconds} seconds for page "{resource}" loaded')
def wait_resource_page_is_loaded(context, seconds, resource):
    context.page = context.get_page_object(resource)

    # Check if certain elements of the new PageObject are loaded
    context.page.wait_until_loaded(timeout=int(seconds))


@step(u'the "{element}" element is displayed')
def resource_is_visible(context, element):
    element = context.get_element_from_current_page(element)
    assert element.web_element.is_displayed()


@step(u'the "{element}" element is not displayed')
def resource_is_not_visible(context, element):
    element = context.get_element_from_current_page(element)
    try:
        assert not element.web_element.is_displayed()
    except AssertionError:
        # If the assert should return False, catch it and assert as False
        assert False
    except:
        # NoSuchElementException or other exception related with the location of the element (not found)
        pass


@step(u'I wait {seconds} seconds')
def wait_n_seconds(context, seconds):
    time.sleep(int(seconds))


@step(u'I wait for element "{element}" displayed (timeout = {timeout:f} seconds)')
@step(u'I wait for element "{element}" displayed')
def wait_element_displayed(context, element, timeout=10):
    element = context.get_element_from_current_page(element)
    element.wait_until_visible(timeout)


@step(u'I wait for element "{element}" to be hidden (timeout = {timeout:f} seconds)')
@step(u'I wait for element "{element}" to be hidden')
def wait_element_displayed(context, element, timeout=10):
    element = context.get_element_from_current_page(element)
    element.wait_until_not_visible(timeout)


@step(u'I wait for ajax request completed')
@step(u'I wait for ajax all requests to be completed')
def wait_for_ajax(context):
    """
    Wait until all ajax requests have finished (default time: 10 seconds)
    """

    context.utils.wait_until_ajax_request_completed()


@step(u'the elements in the table are displayed')
def table_elements_displayed(context):
    """
    check if all elements contained in table are displayed on the current page
    EXAMPLE:
        | element_name |
        |   elem1      |
    """
    for row in context.table:
        context.execute_steps(u"""
            Then the "{element}" element is displayed
            """.format(element=row["element_name"]))


@step(u'I wait until the element "{element}" text is "{text}"')
@step(u'I wait until the text of element "{element}" is "{text}"')
@step(u'I wait until the text of element "{element}" is "{text}" with params')
def wait_until_text_is(context, element, text):
    """
    Waits until text text of an element is the specified one.

    :param context: Toolium context
    :param element: Element to check
    :param text: Expected text
    """
    text = _format_text(context, text)

    wait_until_text_is(context, 10, element, text)


@step(u'I wait "{seconds:f}" seconds until the element "{element}" text is "{text}"')
@step(u'I wait "{seconds:f}" seconds until the text of element "{element}" is "{text}"')
@step(u'I wait "{seconds:f}" seconds until the text of element "{element}" is "{text}" with params')
def wait_until_text_is(context, seconds, element, text):
    """
    Waits until text text of an element is the specified one.

    :param context: Toolium context
    :param seconds: Max seconds to wait
    :param element: Element to check
    :param text: Expected text
    """
    text = _format_text(context, text)
    elem = context.get_element_from_current_page(element)

    try:
        text_match = WebDriverWait(context.driver, seconds).until(
            expected_conditions.text_to_be_present_in_element(elem.locator, text))
    except TimeoutException:
        text_match = False

    assert text_match, \
        u'The text of element "{element}" is not "{text}" after {seconds} seconds.'.format(element=element, text=text,
                                                                                           seconds=seconds)
