# -*- coding: utf-8 -*-

"""
Copyright (c) Telefonica Digital.
ElevenPaths QA Team <qateam@11paths.com>
"""

from behave.model import Table

from toolium11paths.apis.http.renderers import FormRenderer
# noinspection PyUnresolvedReferences
from behave import step as behave_step
from toolium11paths.behave import step
from toolium11paths.behave.api_steps.request import send_http_request_with_form_parameters
from toolium11paths.behave.api_steps.request import set_default_host, set_url_path, send_http_request

__all__ = ['step_latch_login', 'step_request_latch_pairing_token', 'step_get_latch_applications',
           'step_lock_latch_app', 'step_unlock_latch_app', '_set_latch_headers', '_set_status_on']


@step(u'I login user "{user}" with password "{password}"')
def step_latch_login(context, user, password):
    """
    Login as latch mobile user using latch internal API. It is required by another latch steps.
    :param context: behave context
    :param user: latch user
    :param password: latch password
    :returns: API response
    """
    set_default_host(context, 'https://latch.elevenpaths.com')
    set_url_path(context, '/control/1.1/authenticate')
    context.http_request_context.headers = {'X-Client-Version': 'InternalAPITest/0.3'}
    context.table = Table([u'param_name', u'param_value'])
    context.table.add_row([u'username', user])
    context.table.add_row([u'password', password])
    send_http_request_with_form_parameters(context, 'POST')
    return context.api_response


@step(u'I request a latch pairing token')
def step_request_latch_pairing_token(context):
    """
    Get latch pairing token for authenticated user (required for pairing account), using latch internal API.
    """
    context.execute_steps(u'''
        Given The API endpoint "https://latch.elevenpaths.com"
          And The API resource "/control/1.1/pairingToken"
          And I set default latch internal api headers
        When I send a HTTP "GET" request
    ''')


@step(u'I request latch applications')
def step_get_latch_applications(context):
    """
    Get latch paired applications of authenticated user, using latch internal API.
    :param context: behave context
    :returns: API response
    """
    set_default_host(context, 'https://latch.elevenpaths.com')
    set_url_path(context, '/control/1.1/applications')
    _set_latch_headers(context)
    send_http_request(context, 'GET')
    return context.api_response


def _set_app_latch_status(context, app_name, status):
    context.execute_steps(u'''
        Given I request latch applications
          And The API endpoint "https://latch.elevenpaths.com"
          And The API resource "/control/1.1/update"
          And I set default latch internal api headers
          And I set status "{status}" for app "{app_name}" as form params
         When I send a HTTP "POST" request
    '''.format(app_name=app_name, status=status))


@step(u'I lock latch app "{app_name}"')
def step_lock_latch_app(context, app_name):
    """
    Lock latch application of authenticated user, using latch internal API.
    """
    _set_app_latch_status(context, app_name, "off")


@step(u'I unlock latch app "{app_name}"')
def step_unlock_latch_app(context, app_name):
    """
    Unlock latch application of authenticated user, using latch internal API.
    """
    _set_app_latch_status(context, app_name, "on")


@step(u'I set default latch internal api headers')
def _set_latch_headers(context):
    context.http_request_context.headers = {
        "X-Client-Version": "InternalAPITest/0.3",
        "Cookie": context.api_response.cookie.as_cookie_header_value()
    }


@step(u'I set status "{status}" for app "{app_name}" as form params')
def _set_status_on(context, status, app_name):
    operation_id = None
    for operation in context.api_response.json["data"]["operations"]:
        if context.api_response.json["data"]["operations"][operation].get("name") == app_name:
            operation_id = operation

    context.http_request_context.body_params = {
        "status[{}]".format(operation_id): status
    }
    context.http_request_context.renderer = FormRenderer()
