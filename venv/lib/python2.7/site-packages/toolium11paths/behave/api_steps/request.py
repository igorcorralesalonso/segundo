# -*- coding: utf-8 -*-

"""
Copyright (c) Telefonica Digital.
ElevenPaths QA Team <qateam@11paths.com>
"""

"""
Do HTTP API requests easily using Gherkin language.
"""

import json

# noinspection PyUnresolvedReferences
from behave import step as behave_step

from toolium11paths.apis.http import api
from toolium11paths.apis.http.authorization import BasicAuthentication, X11PathsAuthentication
from toolium11paths.apis.http.renderers import FormRenderer, JSONRenderer, get_renderer, PlainTextRenderer
from toolium11paths.behave import step

__all__ = [
    'set_default_host',
    'set_default_proxy',
    'set_url_path',
    'set_url_path_with_params',
    'set_authorization_basic',
    'set_authorization_basic_from_file',
    'set_11path_authorization',
    'set_headers',
    'set_query_parameters',
    'set_body_parameters',
    'set_form_parameters',
    'set_body_files',
    'send_http_request',
    'send_http_request_with_body',
    'send_http_request_with_malformed_body',
    'send_http_request_with_query_parameters',
    'send_http_request_with_form_parameters',
    'send_http_request_with_body_parameters',
    'set_render',
    'send_http_request_with_body_parameters_encoded'
]


@step(u'The API endpoint "{host}"')
def set_default_host(context, host):
    """
    Set host value.

    For example:

    .. code-block:: python

        Given The API endpoint "https://latch.elevenpaths.com"
    """
    context.http_request_context.host = host


@step(u'The API proxy "{host}"')
def set_default_proxy(context, host):
    context.http_request_context.proxy = host


@step(u'The API resource "{url_path}"')
def set_url_path(context, url_path):
    """
    Set URL path value.

    For example:

    .. code-block:: python

        Given The API resource "/api/1.0/status/"

    .. note::

        URL path must start with slash.
    """
    context.http_request_context.url_path = url_path


@step(u'The parameterized API resource "{url_path_str_format}" with these parameter values')
def set_url_path_with_params(context, url_path_str_format):
    """
    Parameters:

        +------+--------+
        | key  | value  |
        +======+========+
        | key1 | value1 |
        +------+--------+
        | key2 | value2 |
        +------+--------+
    """
    table_as_json = dict(context.table)
    url_path = url_path_str_format % table_as_json
    url_path = url_path.format(**table_as_json)
    context.http_request_context.url_path = url_path


@step(u'Authorization-Basic with username "{username}" and password "{password}"')
def set_authorization_basic(context, username, password):
    context.http_request_context.authentication_instances.append(
        BasicAuthentication(username=username, password=password))


@step(u'Authorization-Basic from file "{file_path}"')
def set_authorization_basic_from_file(context, file_path):
    """
    Step. Authorization-Basic from json file with the following structure. e.i:
        {
            "client": "test",
            "secret": "OEIFOWIOiocoioie29890qdllnonAIUoiahc"
        }

    :param context: behave context
    :param file_path: path where the file is located
    :return: None
    """

    with open(file_path) as json_data:
        credentials = json.load(json_data)

    set_authorization_basic(context, username=credentials['client'], password=credentials['secret'])


@step(u'11Paths-Authorization with application id "{app_id}" and secret "{secret}"')
def set_11path_authorization(context, app_id, secret):
    context.http_request_context.authentication_instances.append(X11PathsAuthentication(app_id=app_id, secret=secret))


@step(u'The headers')
def set_headers(context):
    """
    Parameters:

        +--------------+---------------+
        | header_name  | header_value  |
        +==============+===============+
        | header1      | value1        |
        +--------------+---------------+
        | header2      | value2        |
        +--------------+---------------+
    """
    headers = dict()
    for row in context.table:
        headers[row["header_name"]] = row["header_value"]
        context.http_request_context.headers = headers


@step(u'The query parameters')
def set_query_parameters(context):
    """
    Add new query params.
    Parameters:

        +-------------+--------------+
        | param_name  | param_value  |
        +=============+==============+
        | param1      | value1       |
        +-------------+--------------+
        | param2      | value2       |
        +-------------+--------------+
    """
    params = []
    for row in context.table:
        if row['param_value'] is not None:
            params.append((row['param_name'], row['param_value']))

    if not context.http_request_context.query_params:
        context.http_request_context.query_params = list()

    context.http_request_context.query_params.extend(params)


@step(u'The body parameters')
def set_body_parameters(context):
    """
    Parameters:

        +-------------+--------------+
        | param_name  | param_value  |
        +=============+==============+
        | param1      | value1       |
        +-------------+--------------+
        | param2      | value2       |
        +-------------+--------------+
    """
    context.http_request_context.body_params = get_parameters(context)


@step(u'The form parameters')
def set_form_parameters(context):
    """
    Parameters:

        +-------------+--------------+
        | param_name  | param_value  |
        +=============+==============+
        | param1      | value1       |
        +-------------+--------------+
        | param2      | value2       |
        +-------------+--------------+
    """
    context.http_request_context.body_params = get_parameters(context)
    context.http_request_context.renderer = FormRenderer()


def get_parameters(context):
    """
    Reads parameters from context table. None parameters are ignored

    :param context: behave context
    :return: dict with parameters names and values
    """
    if context.table:
        return {row['param_name']: row['param_value'] for row in context.table if row['param_value'] is not None}
    return {}


@step(u'The body files')
def set_body_files(context):
    """
    Parameters:

        +-------------+--------------+
        | param_name  | path_to_file |
        +=============+==============+
        | param1      | value1       |
        +-------------+--------------+
        | param2      | value2       |
        +-------------+--------------+
    """
    files = dict()
    for row in context.table:
        files[row["param_name"]] = row["path_to_file"]
        context.http_request_context.files = files


@step(u'The renderer "{render_name}"')
def set_render(context, render_name):
    """
        Parameters:
        Allowed values for the rederer are: 'json', 'form', 'multipart' and 'plain'
    """
    context.http_request_context.renderer = get_renderer(render_name)


@step(u'I send a HTTP "{method}" request')
def send_http_request(context, method):
    context.http_request_context.method = method
    context.api_response = api.http_request_from_context(context.http_request_context)
    context.http_request_context.clear()


@step(u'I send a HTTP "{method}" request with query parameters')
def send_http_request_with_query_parameters(context, method):
    """
    Parameters:

        +-------------+--------------+
        | param_name  | param_value  |
        +=============+==============+
        | param1      | value1       |
        +-------------+--------------+
        | param2      | value2       |
        +-------------+--------------+
    """
    set_query_parameters(context)
    send_http_request(context, method)


@step(u'I send a HTTP "{method}" request with body parameters')
def send_http_request_with_body_parameters(context, method):
    """
    Parameters:

        +-------------+--------------+
        | param_name  | param_value  |
        +=============+==============+
        | param1      | value1       |
        +-------------+--------------+
        | param2      | value2       |
        +-------------+--------------+
    """
    set_body_parameters(context)
    send_http_request(context, method)


@step(u'I send a HTTP "{method}" request with form parameters')
def send_http_request_with_form_parameters(context, method):
    """
    Parameters:

        +-------------+--------------+
        | param_name  | param_value  |
        +=============+==============+
        | param1      | value1       |
        +-------------+--------------+
        | param2      | value2       |
        +-------------+--------------+
    """
    set_form_parameters(context)
    send_http_request(context, method)


@step(u'I send a HTTP "{method}" request with body parameters encoded "{encoding_type}"')
def send_http_request_with_body_parameters_encoded(context, method, encoding_type):
    """
    Parameters:

        +-------------+--------------+
        | param_name  | param_value  |
        +=============+==============+
        | param1      | value1       |
        +-------------+--------------+
        | param2      | value2       |
        +-------------+--------------+

        Allowed values for encoding_type are: 'json', 'form', 'multipart' and 'plain'
    """
    set_body_parameters(context)
    set_render(context, encoding_type)
    send_http_request(context, method)


@step(u'I send a HTTP "{method}" request with this body "{resource_file}"')
def send_http_request_with_body_resource_file(context, method, resource_file):
    """
        Parameters:
        method: post, put
        resource_file: path relative to src where its contained
    """
    with open(resource_file, 'r') as file_:
        context.http_request_context.body_params = file_.read()
    context.http_request_context.renderer = PlainTextRenderer()
    send_http_request(context, method)


@step(u'I send a HTTP "{method}" request with this {body_type:w}')
def send_http_request_with_body(context, method, body_type):
    """
        Sends a request using the desired method setting the content type and assigning a body.

        e.g. If content type is JSON, add as the text of the step the body to be sent like:
        .. code-block:: json
            {
                "key": "value"
            }

        :param method: method used in the request
        :param body_type: content-type of the request
    """

    body_type = body_type.lower()
    body_types = {
        'json': JSONRenderer,
        'text': PlainTextRenderer
    }

    renderer = body_types.get(body_type, None)
    if renderer is None:
        raise NotImplementedError('Body type used: {0}. Supported body types: {1}. Please, use a supported one.'
                                  .format(body_type, ', '.join(body_types.keys())))

    context.http_request_context.body_params = json.loads(context.text)
    context.http_request_context.renderer = renderer()
    send_http_request(context, method)


@step(u'I send a HTTP "{method}" request with this malformed {body_type:w}')
def send_http_request_with_malformed_body(context, method, body_type):
    """
        Sends a request using the desired method setting the content type and assigning a body. The body can be
        malformed so the effect of not a bad parsing can be tested.

        e.g. If content type is JSON, add as the text of the step the body to be sent like:
        .. code-block:: json
            {
                "key":

        :param method: method used in the request
        :param body_type: content-type of the request
    """

    body_type = body_type.lower()
    body_types = {
        'json': 'application/json',
        'text': 'text/plain'
    }

    content_type = body_types.get(body_type, None)
    if content_type is None:
        raise NotImplementedError('Body type used: {0}. Supported body types: {1}. Please, use a supported one.'
                                  .format(body_type, ', '.join(body_types.keys())))

    context.http_request_context.body_params = context.text
    context.http_request_context.renderer = PlainTextRenderer()
    context.http_request_context.headers['Content-Type'] = content_type
    send_http_request(context, method)
