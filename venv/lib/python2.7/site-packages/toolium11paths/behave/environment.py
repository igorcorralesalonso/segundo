# -*- coding: utf-8 -*-

# Copyright 2016 Telef√≥nica Digital | ElevenPaths
# This file is part of Toolium11paths.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import os
import re
import timeit

from toolium.behave.environment import (before_all as toolium_before_all, before_feature as toolium_before_feature,
                                        before_scenario as toolium_before_scenario,
                                        after_scenario as toolium_after_scenario,
                                        after_feature as toolium_after_feature, after_all as toolium_after_all)

from toolium11paths.testlink.testlink_utils import add_testlink_status, change_all_testlink_status, load_testlink_conf
from toolium11paths.utils.configuration import map_param
from toolium11paths.utils.dataset import prepare_param


def before_all(context):
    """Initialization method that will be executed before the test execution
    :param context: behave context
        Context variables added:
            - context.map_param(value):  (function) to map params to its real values (map_param)
            - context.replace_param(value): (function) to replace param values (prepare_param)
    """
    # Get 'toolium_env' property from user input (e.g. -D toolium_env=ios)
    toolium_env = context.config.userdata.get('toolium_env')
    if toolium_env:
        os.environ['Config_environment'] = toolium_env

    toolium_before_all(context)

    # Available functions in the context
    context.map_param = map_param
    context.replace_param = prepare_param


def before_feature(context, feature):
    """Feature initialization

    :param context: behave context
    :param feature: running feature
    """

    # These context variables are created here to do it compatible with Dynamic Environment feature
    # Context variable to save filled values. The key is the element name.
    # (e.g: context.filled_values['username'])
    context.filled_values = dict()
    # Dictionary to store information between steps
    context.storage = dict()

    toolium_before_feature(context, feature)


def before_scenario(context, scenario):
    """Scenario initialization

    :param context: behave context
    :param scenario: running scenario
    """
    # Initialize execution time
    if not hasattr(context, 'start_time'):
        context.start_time = timeit.default_timer()

    toolium_before_scenario(context, scenario)

    # Configure Testlink properties
    load_testlink_conf()

    # Make sure filled values and storage dicts are empty
    try:
        context.filled_values.clear()
        context.storage.clear()
    except AttributeError:
        context.filled_values = dict()
        context.storage = dict()

    # Save execution time of before_scenario
    context.before_time = int(round(timeit.default_timer() - context.start_time))


def after_scenario(context, scenario):
    """Clean method that will be executed after each scenario

    :param context: behave context
    :param scenario: running scenario
    """
    # Initialize execution time of after_scenario
    if not hasattr(context, 'after_start_time'):
        context.after_start_time = timeit.default_timer()

    toolium_after_scenario(context, scenario)

    # Get tests status (scenario.status.name from behave 1.2.6)
    test_status = scenario.status.name if hasattr(scenario.status, 'name') else scenario.status

    if test_status != 'skipped':
        if test_status == 'passed':
            test_comment = None
        else:
            test_comment = "The scenario '%s' has failed" % scenario.name

        # Get execution time with the following format: test [before, step1, step2, ..., after]
        end_time = timeit.default_timer()
        test_execution_time = int(round(end_time - context.start_time))
        steps_execution_times = [context.before_time if 'before_time' in context else 'ERR']
        steps_execution_times += [int(round(step.duration)) for step in scenario.steps]
        steps_execution_times.append(int(round(end_time - context.after_start_time)))
        execution_time = '{} {}'.format(test_execution_time, steps_execution_times)
        context.logger.debug('Test execution time: %s seconds', execution_time)

        # Save test status to be updated later
        add_testlink_status(get_testlink_keys_from_scenario(scenario), test_status[0], test_comment, execution_time)

    reset_autoloaded_page_object(context)


def reset_autoloaded_page_object(context):
    """
    Resets all page object instances loaded from specification file.
    :return: None
    """

    if context.driver_wrapper.config.getboolean_optional("PageObjectsAutoloader", "enabled", False):
        for page_object in context.page_object_list_autoloaded:
            page_object.reset_object()


def get_testlink_keys_from_scenario(scenario):
    """
    Gets the TestLink IDs from tags with this format:
        @TL.<testlink_id>
    :param scenario: behave object containing list of tags (scenario.tags)
    :return: (list) TestLink IDs
    """
    testlink_regex = re.compile(r'TL\.(\w*\-\d*)')
    keys = []
    for tag in scenario.tags:
        match = testlink_regex.search(tag)
        if match:
            keys.append(match.group(1))
    return keys


def after_feature(context, feature):
    """Clean method that will be executed after each feature
    :param context: behave context
    :param feature: running feature
    """
    toolium_after_feature(context, feature)


def after_all(context):
    """Clean method that will be executed after all features are finished

    :param context: behave context
    """
    toolium_after_all(context)

    # Update tests status in Testlink
    change_all_testlink_status()
