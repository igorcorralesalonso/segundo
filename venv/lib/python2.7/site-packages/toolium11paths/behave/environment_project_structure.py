# -*- coding: utf-8 -*-

"""
Copyright (c) Telefonica Digital.
ElevenPaths QA Team <qateam@11paths.com>
"""

import os
import timeit

from sdklib.http import HttpRequestContext
from toolium.config_files import ConfigFiles

from toolium11paths import config_auto_loader
from toolium11paths.apis.util.urls import generate_url
from toolium11paths.behave.environment import (before_all as toolium_before_all,
                                               before_feature as toolium_before_feature,
                                               before_scenario as toolium_before_scenario,
                                               after_scenario as toolium_after_scenario,
                                               after_feature as toolium_after_feature, after_all as toolium_after_all)
from toolium11paths.utils.configuration import load_project_properties, load_message_properties, \
    load_toolium_properties, get_message_property
from toolium11paths.utils.dataset import prepare_param
from toolium11paths.utils.download_files import get_download_directory_base

"""
This file inits the environment for a Behave! execution, according to the following test project structure:

    ├─ src (vamps-acceptance)
    │    ├─ common
    │    │   ├─ steps   (common steps)
    │    │   │    ├─ my_steps.py
    │    │   │    ├─ ...
    │    │   ├─ environment   (common environment)
    │    │   │    ├─ my_environment.py
    │    │   │    ├─ ...
    │    │   ├─ pageobjects   (custom page obejects)
    │    │   ├─ pageelements  (custom page elements)
    │    │   ├─ apiobjects (custom API obejects)
    │    │   └─ utils (general project utils)
    │    ├─ features
    │    │   ├─ component
    │    │   ├─ integration
    │    │   │    ├─ feature_1
    │    │   │    │    ├─ steps
    │    │   │    │    │    ├─ steps.py
    │    │   │    │    │    └─ __init__.py
    │    │   │    │    ├─ feature1.feature
    │    │   │    │    └─ environment.py
    │    │   │    └─ ...
    │    │   └─ e2e
    │    ├─ resources
    │    │   ├─ baseline
    │    │   ├─ page_object_definitions
    │    │   │    └─ object.yaml
    │    │   └─ language
    │    │        ├─ es_<page>.cfg
    │    │        ├─ en_<page>.cfg
    │    │        └─ ...
    │    ├─ settings
    │    │   ├─ pre-properties.json
    │    │   ├─ int-properties.json
    │    │   ├─ qa-properties.json  (default config)
    │    │   ├─ toolium.cfg
    │    │   ├─ local-toolium.cfg (local config file)
    │    │   └─ logging.conf
    │    ├─ scripts
    │    ├─ requirements.txt
    │    ├─ Vagrantfile
    │    ├─ behave.ini
    │    ├─ README.md
    │    ├─ _output
    │    │   ├─ acceptance_int.log
    │    │   └─ ...
    │    └─ ...

"""

CONFIG_PROPERTIES_DIR = u'settings'
CONFIG_PROPERTIES_LANG_DIR = u'resources%slanguage' % os.sep
CONFIG_PROPERTIES_CONF = u'toolium.cfg'
CONFIG_PROPERTIES_CONF_LOCAL = u'local-toolium.cfg'
CONFIG_PROPERTIES_LOGGING = u'logging.conf'
CONFIG_PROPERTIES_ENVIRONMENT = "{env}-properties.json"
OUTPUT_DIR = u'_output'
OUTPUT_LOGFILE_NAME = u'acceptance_int.log'
VISUAL_BASELINE_DIR = u'resources%sbaseline' % os.sep

CONFIG_PROPERTIES_CUSTOM_PAGEOBJECTS = u'common%spageobjects' % os.sep
CONFIG_PROPERTIES_CUSTOM_PAGEELEMENTS = u'common%spageelements' % os.sep


def page_object_autoloader_init(context_or_world):
    """
    Run all environment operations related with the PageObjects auto-generation process from YAML file.
        - Loads PageObjects definition from YAML file and creates the given PageObjects based on those specs.
        - Sets in the context environment a new function to get a PageObject loaded by its name.
    :param context_or_world: behave context or lettuce world
    :return: None
        Context variables added:
            - context.page_object_list_autoloaded: (list) PageObjectAutoloaded list
            - context.get_page_object(page_object_name): (function) to retrieve a PageObject by its name
    """

    config = context_or_world.driver_wrapper.config
    if config.getboolean_optional("PageObjectsAutoloader", "enabled", False):
        context_or_world.logger.info("PageObject Autoloader enabled. Trying to init Page Objects ...")

        yaml_file = config.get_optional("PageObjectsAutoloader",
                                        "definition_files_path",
                                        "resources/page_objects_definition")
        context_or_world.logger.debug("YAML files path to be loaded: '%s'", yaml_file)

        custom_pageelements_path = config.get_optional("PageObjectsAutoloader",
                                                       "custom_pageelements_path",
                                                       CONFIG_PROPERTIES_CUSTOM_PAGEELEMENTS)
        context_or_world.logger.debug("Custom PageElements path to be loaded: '%s'", custom_pageelements_path)

        custom_pageobjects_path = config.get_optional("PageObjectsAutoloader",
                                                      "custom_pageobjects_path",
                                                      CONFIG_PROPERTIES_CUSTOM_PAGEOBJECTS)
        context_or_world.logger.debug("Custom PageObjects path to be loaded: '%s'", custom_pageobjects_path)

        page_object_definition = config_auto_loader.load_page_object_definition(yaml_file)
        context_or_world.page_object_list_autoloaded = \
            config_auto_loader.create_page_objects(page_object_definition,
                                                   custom_page_objects_parent_dir=custom_pageobjects_path,
                                                   custom_page_elements_parent_dir=custom_pageelements_path)

        def get_page_object(page_object_name):
            page = config_auto_loader.get_page_object(context_or_world.page_object_list_autoloaded, page_object_name)
            page.reset_object(context_or_world.driver_wrapper)
            return page

        platformName = "android" if context_or_world.driver_wrapper.is_android_test() else \
            "ios" if context_or_world.driver_wrapper.is_ios_test() else None

        def get_element_from_current_page(page_element_name):
            return config_auto_loader.get_element_from_page_object(context_or_world.page, page_element_name, platformName)

        context_or_world.get_page_object = get_page_object
        context_or_world.get_element_from_current_page = get_element_from_current_page


def before_all(context):
    """
    Initialization method that will be executed before all execution
    Variables added to Behave's context after execution:
        - context.driver_wrapper -> toolium.driver_wrapper.DriverWrapper
        - context.utils -> toolium.utils.driver_utils.Utils
        - context.toolium_config -> toolium.config_parser.ExtendedConfigParser
        - context.logger -> logging
        - context.config_files -> ConfigFiles
        - context.page_object_list_autoloaded: (list) PageObjectAutoloaded list
        - context.language: Execution language (default: es)
        - context.environment: Execution environment (default: qa)
    Methods added to Behave's context:
        - context.get_page_object(page_object_name): (function) to retrieve a PageObject by its name
        - context.get_message_property(key_string): (function) to retrieve the text message in the specified language
            from the language properties file, using a key_string like this: "home.button.login".
    :param context: behave context
    """

    # Framework Configuration
    config_files = ConfigFiles()
    config_files.set_config_directory(CONFIG_PROPERTIES_DIR)
    config_files.set_config_log_filename(CONFIG_PROPERTIES_LOGGING)
    config_files.set_output_directory(OUTPUT_DIR)
    config_files.set_visual_baseline_directory(VISUAL_BASELINE_DIR)
    config_files.set_config_properties_filenames(CONFIG_PROPERTIES_CONF, CONFIG_PROPERTIES_CONF_LOCAL)
    config_files.set_output_log_filename(OUTPUT_LOGFILE_NAME)
    context.config_files = config_files
    toolium_before_all(context)

    config = context.toolium_config

    # Load environment variables. Default: QA
    context.environment = config.get_optional('TestExecution', 'environment', 'QA').lower()
    load_project_properties(CONFIG_PROPERTIES_DIR, CONFIG_PROPERTIES_ENVIRONMENT.format(env=context.environment))
    load_toolium_properties(context.toolium_config)

    # Load language properties from files. Default: ES
    context.language = config.get_optional('TestExecution', 'language', 'ES').lower()
    load_message_properties(context.language, CONFIG_PROPERTIES_LANG_DIR)
    context.get_message_property = get_message_property

    # Allows the definition of absolute paths on configuration files
    if context.driver_wrapper.is_mobile_test():
        app = config.get_optional('AppiumCapabilities', 'app')
        if app and not app.startswith('http') and not os.path.isabs(app):
            absolute_app = os.path.abspath(app)
            os.environ["AppiumCapabilities_app"] = absolute_app

    # Saves download directory path
    context.download_directory = config.get_optional('TestExecution', 'download_directory')
    context.download_directory_base = get_download_directory_base(context)

    # Saves Http Context API
    context.http_request_context = HttpRequestContext()
    context.http_request_context.fields_to_clear = [
        'host', 'method', 'url_path', 'headers', 'body_params', 'query_params', 'files', 'renderer',
        'authentication_instances'
    ]
    if config.getboolean_optional('Api', 'proxy_enabled', False):
        api_proxy_host = config.get_optional('Api', 'proxy_host', '127.0.0.1').lower()
        api_proxy_port = config.get_optional('Api', 'proxy_port', '8080').lower()
        api_proxy_scheme = config.get_optional('Api', 'proxy_scheme', 'http').lower()
        context.http_request_context.proxy = generate_url(host=api_proxy_host,
                                                          port=api_proxy_port,
                                                          scheme=api_proxy_scheme)

    page_object_autoloader_init(context)


def before_feature(context, feature):
    """Feature initialization

    :param context: behave context
    :param feature: running feature
    """
    toolium_before_feature(context, feature)


def before_scenario(context, scenario):
    """
    Scenario initialization. To be executed before each scenario. Creates and configures the Toolium
    DriverWrapper.
    Variables added to Behave's context after execution:
        - context.assert_screenshot -> Assert that a screenshot of an element is the same as a screenshot on disk,
        within a given threshold
        - context.assert_full_screenshot -> Assert that a screenshot of an element is the same as a screenshot on disk,
        within a given threshold
    :param context: behave context
    :param scenario: running scenario
    """
    # Initialize execution time
    if not hasattr(context, 'start_time'):
        context.start_time = timeit.default_timer()

    # Change firefox and chrome language properties
    os.environ["FirefoxPreferences_intl.accept_languages"] = context.language
    os.environ["ChromePreferences_intl.accept_languages"] = context.language
    os.environ["AppiumCapabilities_language"] = context.language

    # Change firefox and chrome download directory paths translating [RANDOM] replacement mask
    if context.download_directory is not None:
        context.download_directory = prepare_param(context.download_directory)
        absolute_download_directory = context.download_directory_base + context.download_directory
        os.environ["FirefoxPreferences_browser.download.dir"] = absolute_download_directory
        os.environ["ChromePreferences_download.default_directory"] = absolute_download_directory

    toolium_before_scenario(context, scenario)

    # Context variable to manage the list of page objects (PageObject) generated by tests,
    # in order to be used in TearDown process.
    context.page_object_list = list()

    # Save execution time of before_scenario
    context.before_time = int(round(timeit.default_timer() - context.start_time))


def after_scenario(context, scenario):
    """
    Clean method that will be executed after each scenario
    :param context: behave context
    :param scenario: running scenario
    """

    toolium_after_scenario(context, scenario)
    context.http_request_context.clear()


def after_feature(context, feature):
    """Clean method that will be executed after each feature
    :param context: behave context
    :param feature: running feature
    """
    toolium_after_feature(context, feature)


def after_all(context):
    """
    Clean method that will be executed after all features are finished.
    :param context: behave context
    """

    toolium_after_all(context)
