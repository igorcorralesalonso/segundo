# -*- coding: utf-8 -*-

"""
Copyright (c) Telefonica Digital | Eleven Paths.
ElevenPaths QATeam
"""

from HTMLParser import HTMLParser


class BlankVulnerabilityHtmlParser(HTMLParser):
    def __init__(self, context):
        self.reset()
        self.context = context

    @staticmethod
    def vulnerability_fixed(rel_value):
        """
        Check if vulnerability is fixed
        :param rel_value: rel value
        :returns: true if vulnerability is fixed
        """
        return "noreferrer" in rel_value and "noopener" in rel_value

    def handle_starttag(self, tag, attrs):
        target = ""
        rel = ""
        for attr in attrs:
            if attr[0] == "target" and attr[1] == "_blank":
                target = "blank"
            elif attr[0] == "rel":
                rel = attr[1]

        if target == "blank" and not self.vulnerability_fixed(rel):
            error_message = "VULNERABILITY TARGET=_BLANK FOUND loading resource = %s" % self.context.driver.current_url
            self.context.logger.error(error_message)
            assert False, error_message
