# -*- coding: utf-8 -*-

"""
Copyright (c) Telefonica Digital | Eleven Paths.
ElevenPaths QATeam
"""

from HTMLParser import HTMLParser
from urlparse import urlparse

import requests


class ImageElementsHtmlParser(HTMLParser):
    def __init__(self, context):
        self.reset()
        # List of img links found
        self.found_links = []
        self.context = context

    @staticmethod
    def get_domain(url):
        return '{uri.scheme}://{uri.netloc}/'.format(uri=urlparse(url))

    @staticmethod
    def get_src(attrs):
        for attr in attrs:
            if attr[0] == "src":
                return attr[1]

    def handle_starttag(self, tag, attrs):
        for attr in attrs:
            if tag == "img" and attr[0] == "src":
                img_link = attr[1]
                if img_link[:2] == "//":
                    img_link = "http:" + img_link
                elif not img_link[:4] == "http":
                    # absolute path to img src
                    img_link = self.get_domain(self.context.driver.current_url) + img_link

                if img_link not in self.found_links:
                    self.found_links.append(img_link)
                    page = requests.get(img_link)
                    error_message = 'IMG SRC BROKEN LINK = %s' % img_link
                    if page.status_code != 200:
                        self.context.logger.error(error_message)
                    assert page.status_code == 200, error_message
