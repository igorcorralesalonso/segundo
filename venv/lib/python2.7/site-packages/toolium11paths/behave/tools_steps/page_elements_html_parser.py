# -*- coding: utf-8 -*-

"""
Copyright (c) Telefonica Digital | Eleven Paths.
ElevenPaths QATeam
"""

import os
import re
import uuid
from HTMLParser import HTMLParser


class PageElementsHtmlParser(HTMLParser):
    """
    EXAMPLE : parser.feed('<img src="python-logo.png" alt="The Python logo">')

    will translate in :

    Start tag: img
         attr: ('src', 'python-logo.png')
         attr: ('alt', 'The Python logo')
    """

    def __init__(self, context, viewable, query_string, currentpage, locator='id'):
        self.reset()

        # Configure output yaml file
        dir = "_output/yaml"  # Default YAML page object folder
        if not os.path.isdir(dir):
            os.makedirs(dir)

        yaml_file = os.path.join(dir, self.to_underscore(currentpage) + ".yaml")
        if os.path.isfile(yaml_file):
            yaml_file = os.path.join(dir, self.to_underscore(currentpage) + "_" + str(uuid.uuid4())[:8] + ".yaml")

        # Add page name to file
        self.output = open(yaml_file, "w")
        self.output.writelines(currentpage)
        self.output.writelines(":\n")

        # List of ID's found on wrapping process
        self.foundids = [] if query_string is None else 0

        self.context = context
        self.viewable = viewable
        self.query_string = query_string
        self.locator = locator

    def write_yaml(self, type, locatortype, id, value, viewable, xpathcounter=None, locator='id'):
        # Writes each PageElement on file "output" on specified values

        name = id if xpathcounter is None else '%s_%d' % (id, xpathcounter)
        value = value if xpathcounter is None else "((//*[contains(@%s,\"" % locator + id + "\")])[%s])" % str(
            xpathcounter)

        self.output.write("  - " + type + " :\n")
        self.output.write("      Name            : %s\n" % name)
        self.output.write("      Locator-Type    : %s\n" % locatortype)
        self.output.write("      Locator-Value   : %s\n" % value)
        self.output.write("      Wait-For-Loaded : %s\n" % viewable)

    @staticmethod
    def to_underscore(camel_case):
        regex = re.compile('((?<=[a-z0-9])[A-Z]|(?!^)[A-Z](?=[a-z]))')
        return regex.sub(r'_\1', camel_case).lower()

    @staticmethod
    def attrs_to_list(attrs):
        return [attr[0] for attr in attrs]

    @staticmethod
    def get_link(attrs):
        for attr in attrs:
            if attr[0] == "href":
                return attr[1]

    def processing_elem(self, element_type, locator_type, id, value, partial, locator):
        if partial:
            self.processing_elem_xpath(element_type, locator_type, id, value, locator)
        else:
            self.processing_elem_id(element_type, locator_type, id, value)

    def processing_elem_xpath(self, element_type, locator_type, id, value, locator):
        try:
            name = id.replace("-", "_")
            xpath = ("//*[contains(@%s,\"%s\")]" % (locator, id))
            elem = self.context.driver.find_elements_by_xpath(xpath)
            if elem is not None:
                elem = elem[self.foundids]
                self.foundids += 1
                if elem.is_displayed():
                    self.write_yaml(element_type, locator_type, name, value, "True", self.foundids, locator=locator)
                else:
                    print "not displayed", xpath, self.foundids
            else:
                print "-None-"
        except:
            print ("DEBUG INFO : " + element_type + " - Webelement not found : " + id)

    def processing_elem_id(self, element_type, locator_type, id, value):
        try:
            name = id.replace("-", "_")
            elem = self.context.driver.find_element_by_id(id)
            if elem.is_displayed():
                self.foundids.append(name)
                if locator_type == "XPATH":
                    self.write_yaml(element_type, locator_type, name + "_link", value, "True")
                else:
                    self.write_yaml(element_type, locator_type, name, value, "True")
            elif self.viewable.lower() == "all":
                if locator_type == "XPATH":
                    self.write_yaml(element_type, locator_type, name + "_link", value, "False")
                else:
                    self.write_yaml(element_type, locator_type, name, value, "False")
        except:
            print ("DEBUG INFO : " + element_type + " - Webelement not found : " + id)

    def handle_starttag(self, tag, attrs):
        locator_type = 'ID' if self.query_string is None else 'XPATH'

        for attr in attrs:
            if attr[0] == self.locator and (self.query_string is None or self.query_string in attr[1]):
                id = attr[1] if self.query_string is None else self.query_string
                if tag == "input":
                    self.processing_elem("InputText", locator_type=locator_type, id=id, value=attr[1],
                                         partial=self.query_string is not None, locator=self.locator)
                elif tag == "select":
                    self.processing_elem("Select", locator_type=locator_type, id=id, value=attr[1],
                                         partial=self.query_string is not None, locator=self.locator)
                elif tag == "button":
                    self.processing_elem("Button", locator_type=locator_type, id=id, value=attr[1],
                                         partial=self.query_string is not None, locator=self.locator)
                elif tag == "a":
                    if "href" in self.attrs_to_list(attrs):
                        self.processing_elem("Link", locator_type=locator_type, id=id, value=attr[1],
                                             partial=self.query_string is not None, locator=self.locator)
                        link = '//a[@href="' + self.get_link(attrs) + '"]'
                        self.processing_elem("Link", locator_type=locator_type, id=id, value=link,
                                             partial=self.query_string is not None, locator=self.locator)
                else:
                    self.processing_elem("PageElement", locator_type=locator_type, id=id, value=attr[1],
                                         partial=self.query_string is not None, locator=self.locator)

    def handle_endtag(self, tag):
        pass

    def handle_data(self, data):
        pass
