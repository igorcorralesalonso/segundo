# -*- coding: utf-8 -*-

"""
Copyright (c) Telefonica Digital.
ElevenPaths QA Team <qateam@11paths.com>
"""

import time

# noinspection PyUnresolvedReferences
from behave import step as behave_step
from toolium11paths.behave import step

__all__ = ('check_timer', 'init_timer', 'print_timer')


@step(u'I check that load time is less than "{seconds:d}" seconds')
def check_timer(context, seconds):
    """
    Checks if the difference time value between current time value and the context.timer variable stored is smaller
    than the time (seconds) given.
    :param context: where you and behave can store information to share around. Automatically managed by behave.
    :param seconds: (int) seconds that will be compare with the time difference.
    :return: None
    """
    time_difference = print_timer(context)
    assert time_difference < seconds, "Page took more than '{}' to be completely loaded.".format(seconds)


@step(u'I initialize timer')
def init_timer(context):
    """
    Initialize timer variable with current time and store it in context.
    :param context: where you and behave can store information to share around. Automatically managed by behave.
        timer: variable with init time.
    :return: None
    """
    context.timer = time.time()


@step(u'I print timer difference until now')
def print_timer(context):
    """
    Calculates and prints time difference between the current time value and the context.timer variable stored.
    :param context: where you and behave can store information to share around. Automatically managed by behave.
    :return: (float) difference time between now and the context.timer value.
    """
    time_difference = time.time() - context.timer
    print("\nTimer value in seconds is: '{}'.".format(time_difference))
    context.logger.info("Timer value in seconds is: '{}'.".format(time_difference))
    return time_difference


