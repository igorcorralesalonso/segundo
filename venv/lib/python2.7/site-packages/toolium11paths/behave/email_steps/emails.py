# -*- coding: utf-8 -*-

"""
Copyright (c) Telefonica Digital.
ElevenPaths QA Team <qateam@11paths.com>
"""

# noinspection PyUnresolvedReferences
from behave import step as behave_step

from toolium11paths.behave import step
from toolium11paths.emailobjects.email_driver import Office365Driver, GmailDriver

__all__ = ('get_office365_email_for_user_containing_subject', 'get_gmail_email_for_user_containing_subject',
           'get_office365_expired_email_for_user_containing_subject', 'check_no_received_emails',
           'go_to_link_received_in_email', 'resource_page_is_loaded')


@step(
    u'I get the last email that contains "{message}" in the subject from "{username}" office365 account with password "{password}"')
def get_office365_email_for_user_containing_subject(context, message, username, password):
    # To use this step, users must be sure that the expected email has been received including a wait in their scenarios
    # Get last email containing certain subject from office365 for a given account
    mail = Office365Driver(user=username, password=password)

    # Save last email with a given subject in context.email variable
    context.page = mail.get_last_email(subject__contains=message)
    assert context.page, "No emails retrieved from Office365 with the given subject"


@step(
    u'I get the last email that contains "{message}" in the subject from "{username}" gmail account with password "{password}"')
def get_gmail_email_for_user_containing_subject(context, message, username, password):
    # Get last email containing certain subject from gmail for a given account
    mail = GmailDriver(user=username, password=password)

    # Save last email with a given subject in context.email variable
    context.page = mail.get_last_email(subject__contains=message)
    assert context.page, "No emails retrieved from Gmail with the given subject"


@step(
    u'I get an expired email that contains "{message}" in the subject from "{username}" office365 account with password "{password}"')
def get_office365_expired_email_for_user_containing_subject(context, message, username, password):
    # To use this step, users must be sure that the expected email has been received including a wait in their scenarios
    # Get last email containing certain subject from office365 for a given account
    mail = Office365Driver(user=username, password=password)

    # Save second email from user inbox with a given subject in context.email variable
    context.page = mail.get_email_by_position(position=1, subject=message)


@step(u'I use the link received in "{element}" element from "{email_object}" email')
def go_to_link_received_in_email(context, element, email_object):
    context.email = context.get_page_object(email_object)
    context.page.__class__ = context.email.__class__
    context.email_link = context.get_element_from_current_page(element)

    # Load in current driverWrapper the url text from emailObject
    context.driver.get(context.email_link)


@step(u'I check out that no new emails were received')
def check_no_received_emails(context):
    assert context.page is None


@step(u'the text of the element "{element}" from "{email_object}" mail is equal to "{text}"')
def assert_text_of_email_element(context, element, email_object, text):
    """
    Verify the content of email by matching the text of an element.
    :param context: Behave context
    :param element: Mail element
    :param email_object: Email page object
    :param text: Text to match
    """
    context.email = context.get_page_object(email_object)
    context.page.__class__ = context.email.__class__
    element_text = context.get_element_from_current_page(element).text

    assert element_text == text, \
        u'Text from email does not match.\n\tMail value: {value}\n\tExpected value: {expected}'.format(
            value=element_text, expected=text)


@step(u'the "{resource}" mail page is loaded')
def resource_page_is_loaded(context, resource):
    """
    Load the EmailPage object to allow to interact with it

    :param context: Behave context
    :param resource: EmailPage name
    """
    context.email = context.get_page_object(resource)
    context.page.__class__ = context.email.__class__
