# -*- coding: utf-8 -*-

# Copyright 2016 Telef√≥nica Digital | ElevenPaths
# This file is part of Toolium11paths.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support.ui import WebDriverWait


# Monkey patching Toolium method in __init__.py
def focus_element(self, element, click=False):
    """
    Set the focus over the given element.
    :param element: either a WebElement, PageElement or element locator as a tuple (locator_type, locator_value)
    :param click: (bool) If true, click on the element after putting the focus over it.
    """

    action_chain = ActionChains(self.driver_wrapper.driver).move_to_element(self.get_web_element(element))
    action_chain.click().perform() if click else action_chain.perform()


# Monkey patching Toolium method in __init__.py
def wait_until_ajax_request_completed(self, timeout=10):
    """
    Wait for all ajax requests completed
    :param timeout: max time to wait
    """
    self.logger.debug("Waiting for ajax request ... (%d seconds)", timeout)
    WebDriverWait(self.driver_wrapper.driver, timeout). \
        until(lambda driver: self.driver_wrapper.driver.execute_script("return jQuery.active == 0"))
    self.logger.debug("Ajax request completed")


def wait_until_url_is(self, url, timeout=10, equals=True):
    if equals:
        wait_until = WebDriverWait(self.driver_wrapper.driver, timeout).until
    else:
        wait_until = WebDriverWait(self.driver_wrapper.driver, timeout).until_not

    return wait_until(url_to_be(url))


class url_to_be(object):
    """An expectation for checking the current url.
    url is the expected url, which must be an exact match
    returns True if the title matches, false otherwise."""
    # TODO: Copied from Selenium original code, remove after an update.
    def __init__(self, url):
        self.url = url

    def __call__(self, driver):
        return self.url == driver.current_url
