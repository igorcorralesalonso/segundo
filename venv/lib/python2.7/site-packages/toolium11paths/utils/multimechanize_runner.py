#  -*- coding: utf-8 -*-

"""
Copyright (c) Telefonica Digital.
ElevenPaths QA Team <qateam@11paths.com>
"""
import ConfigParser
import argparse
import glob
import logging
import os
import shutil
import sys
from subprocess import Popen

from toolium11paths.behave.behave_runner import valid_user_data

from toolium11paths.utils.datetime_utils import time_str_to_secs
from toolium11paths.utils.multimechanize_transaction import LOGGER_NAME, LOGGING_FILE


def run_multimechanize():
    """
    Run multimechanize tests using given config file
        $ ./multimech_runner.py -f CONFIG_FILE_RELATIVE_PATH
    """
    print('\n-------------------------')
    print('- Multimechanize runner -')
    print('-------------------------')
    sys.stdout.flush()

    # Get configuration parameters
    args = get_command_line_args()
    config_file = args.config_file
    # Assume tests folder is the current folder or the first folder level in configs path
    tests_folder = '.' if os.path.isdir('test_scripts') else config_file.split(os.path.sep)[0]
    if not os.path.isdir(os.path.join(tests_folder, 'test_scripts')):
        print('Error: test_scripts folder not found')
        return

    for user_data in args.user_data:
        os.environ.update(user_data)

    # Run tests
    copy_config_file(config_file, tests_folder)
    run_multimechanize_process(tests_folder)
    move_logging_file(tests_folder)


def get_command_line_args():
    """
    Parse command line arguments
    :returns: command line arguments
    """
    parser = argparse.ArgumentParser()
    required = parser.add_argument_group('required named arguments')
    required.add_argument('-f', metavar='config_file', dest='config_file', required=True,
                          help='config file relative path')

    parser.add_argument('-D', metavar='name=value', dest='user_data', default=[], action='append',
                        help='user data parameters', type=valid_user_data)

    return parser.parse_args()


def copy_config_file(config_file, tests_folder):
    """
    Copy given config file to tests folder
    :param config_file: config file name
    :param tests_folder: tests folder name
    """
    dst_config_file = os.path.join(tests_folder, 'config.cfg')
    print('Copying config file from {} to {}'.format(config_file, dst_config_file))
    sys.stdout.flush()
    #shutil.copyfile(config_file, dst_config_file)
    config = ConfigParser.ConfigParser()

    config.read(config_file)
    time_configs = [u'global.run_time', u'global.rampup', u'global.results_ts_interval']

    first_header = True
    with open(dst_config_file, 'w') as f:
        for section in config.sections():
            if first_header:
                first_header = False
            else:
                f.write('\n')

            f.write('[{name}]\n'.format(name=section))
            for option in config.options(section):
                value = config.get(section, option)
                if u'{section}.{option}'.format(section=section, option=option) in time_configs:
                    value = int(time_str_to_secs(value))

                f.write('{key} = {value}\n'.format(key=option, value=value))


def run_multimechanize_process(tests_folder):
    """
    Run multimechanize
    :param tests_folder: tests folder name
    """
    command = ['multimech-run', tests_folder]
    print('Running multimechanize command: {}'.format(' '.join(command)))
    sys.stdout.flush()
    try:
        process = Popen(command)
        process.wait()
    except Exception as e:
        print('Error executing command: {}'.format(e))
        sys.stdout.flush()


def move_logging_file(tests_folder):
    """
    Move logging file to results folder
    :param tests_folder: tests folder name
    """
    # Close file handlers
    logger = logging.getLogger(LOGGER_NAME)
    handlers = logger.handlers[:]
    for handler in handlers:
        handler.close()
        logger.removeHandler(handler)

    # Search logging file
    src_logger_file = LOGGING_FILE
    if not os.path.isfile(src_logger_file):
        print('Error: logging file not found in {}, maybe the tests have not been executed'.format(src_logger_file))
        return

    # Move logging file
    results_folders = glob.glob(os.path.join(tests_folder, 'results', 'results_*'))
    latest_results_folder = max(results_folders, key=os.path.getctime)
    dst_logging_file = os.path.join(latest_results_folder, src_logger_file)
    print('Moving logging file to {}'.format(dst_logging_file))
    sys.stdout.flush()
    shutil.move(src_logger_file, dst_logging_file)
