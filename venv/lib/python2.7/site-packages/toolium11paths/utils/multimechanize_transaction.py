# -*- coding: utf-8 -*-

"""
Copyright (c) Telefonica Digital.
ElevenPaths QA Team <qateam@11paths.com>
"""

import logging
import os

import time
import urllib3
from sdklib.http import HttpRequestContext
from toolium.config_parser import ExtendedConfigParser

from toolium11paths.behave.environment_project_structure import CONFIG_PROPERTIES_DIR, CONFIG_PROPERTIES_CONF
from toolium11paths.behave.environment_project_structure import CONFIG_PROPERTIES_ENVIRONMENT
from toolium11paths.driver_wrappers_pool import DriverWrappersPool
from toolium11paths.utils.configuration import load_project_properties

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# Logging configuration
LOGGING_LEVEL = logging.DEBUG
LOGGING_FILE = 'multimechanize_tests.log'
LOGGING_FORMAT = '%(levelname)-7s %(asctime)s [%(module)s] %(message)s'
LOGGER_NAME = 'multimechanize'


class MultimechanizeTransaction(object):
    def __init__(self, config_properties_dir=None):
        logging.basicConfig(filename=LOGGING_FILE, level=LOGGING_LEVEL, format=LOGGING_FORMAT)
        self.logger = logging.getLogger(LOGGER_NAME)
        self.context = self.get_fake_context()
        self.config_properties_dir = config_properties_dir if config_properties_dir else CONFIG_PROPERTIES_DIR
        self.load_config()
        # Avoid error debugging multimechanize scripts
        if not hasattr(self, 'custom_timers'):
            self.custom_timers = {}
        self._current_timers = {}

    def run(self):
        """Launch logging_run method in child class"""
        try:
            self.logging_run()
            self._current_timers = {}
        except AssertionError as ase:
            self.logger.error('Assertion error on transaction: %s', ase)
            raise ase
        except Exception as exc:
            self.logger.error('Error in multimechanize script: %s', exc)
            raise exc

    def logging_run(self):
        """Child classes should override this method with specific API calls and checks"""
        pass

    def start_step(self, name):
        """
        Register the step at current time.

        :param name: Step name. Must be unique.
        """
        assert name not in self._current_timers, \
            u'The step "{name}" was initiated previously. Finish it or use a different name.'.format(name=name)
        self._current_timers[name] = time.time()

    def end_step(self, name):
        """
        Finalizes the step at current time and add the duration to custom_timers.

        :param name: Step name. Must be unique.
        """
        assert name in self._current_timers, \
            u'The step "{name}" was not initiated previously. Check the name.'.format(name=name)
        self.custom_timers[name] = time.time() - self._current_timers[name]
        del self._current_timers[name]

    def load_config(self):
        """Load project configuration for a specific environment"""
        # Find config subfolder in 'acceptance' folder
        config_path = DriverWrappersPool._find_parent_directory(os.path.join('acceptance', self.config_properties_dir),
                                                                CONFIG_PROPERTIES_CONF)
        if not os.path.isfile(os.path.join(config_path, CONFIG_PROPERTIES_CONF)):
            # If acceptance is not found, find config subfolder again
            config_path = DriverWrappersPool._find_parent_directory(self.config_properties_dir, CONFIG_PROPERTIES_CONF)

        # Get environment from toolium.cfg
        config_file_path = os.path.join(config_path, CONFIG_PROPERTIES_CONF)
        config = ExtendedConfigParser.get_config_from_file(config_file_path)
        config.update_properties(os.environ)
        environment = config.get_optional('TestExecution', 'environment', 'QA').lower()

        # Load environment variables
        env_file_path = os.path.join(config_path, CONFIG_PROPERTIES_ENVIRONMENT.format(env=environment))
        load_project_properties(env_file_path)

        # Add most common used context variables
        self.context.toolium_config = config
        self.context.environment = environment
        self.context.language = config.get_optional('TestExecution', 'language', 'ES').lower()

    def get_fake_context(self):
        """
        Create an object to simulate behave context in multimechanize tests
        :returns: fake context object
        """

        class FakeContext(object):
            pass

        context = FakeContext()
        context.table = None
        context.http_request_context = HttpRequestContext()
        context.logger = self.logger
        return context
