# -*- coding: utf-8 -*-

"""
Copyright (c) Telefonica Digital.
ElevenPaths QA Team <qateam@11paths.com>
"""

from toolium11paths.pageobjects.page_object import PageObject
from toolium11paths.driver_wrappers_pool import DriverWrappersPool


class PageObjectAutoloaded(PageObject):
    """
    Class to represent a web page or a mobile application screen when it is auto-loaded
    from a specification file (YAML) dynamically in runtime. All its elements will be
    auto-created based on this specification.

    :type name: (string) Name to identify the auto-loaded PageObject. e.i: LoginPage
    """

    def __init__(self, page_name, driver_wrapper=None):
        """Initialize page object properties and update their page elements
        :paran page_name: (string) Name to identify the auto-loaded PageObject. e.i: LoginPage
        :param driver_wrapper: driver wrapper instance
        """

        super(PageObjectAutoloaded, self).__init__(driver_wrapper=driver_wrapper)

        # Name to identify the auto-loaded PageObject.
        self.page_name = page_name

    def wait_until_loaded(self, timeout=None):
        """
        Wait until page is loaded using the auto-loaded information.
        :param timeout: max time to wait
        :returns: this page object instance
        """

        if timeout is None:
            # Load explicit timeout. Default: 10
            config = DriverWrappersPool.get_default_wrapper().config
            timeout = int(config.get_optional('Driver', 'explicitly_wait', '10'))

        for page_element in super(PageObjectAutoloaded, self)._get_page_elements():
            if hasattr(page_element, "if_wait") and page_element.if_wait:
                self.logger.debug("Waiting for element loaded: %s", page_element)
                page_element.wait_until_visible(timeout=timeout)

        return self
