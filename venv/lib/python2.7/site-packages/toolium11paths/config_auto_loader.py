# -*- coding: utf-8 -*-

"""
Copyright (c) Telefonica Digital.
ElevenPaths QA Team <qateam@11paths.com>
"""

import logging
import os
from copy import copy

from yaml import load

from toolium11paths.pageelements import *
from toolium11paths.pageobjects.page_object_autoloaded import PageObjectAutoloaded

from appium.webdriver.common.mobileby import MobileBy as By

from collections import OrderedDict

__logger__ = None

PAGE_ELEMENT_CREATION_PATTERN = \
    "page_object.element_{att_name}={page_element_name}(By.{locator_type}, '{locator_value}')"

PAGE_ELEMENT_CREATION_NAME = "page_object.element_{att_name}.element_name={element_name}"

PAGE_OBJECT_ATT_IF_WAIT_PATTER = \
    "page_object.element_{att_name}.if_wait = {if_wait}"

PAGE_OBJECT_PROPERTIES_KEY = u'_Properties_'


def _init_logger():
    """
    Inits the logger manager for this file
    :return:
    """

    global __logger__
    __logger__ = logging.getLogger(__name__) if __logger__ is None else __logger__


def _get_all_modules_from_parent_dir(parent_dir):
    """
    Returns a list of available modules in the given directory
    :param parent_dir: (string) Dir with python modules
    :return: (list) List of module names detected in the given dir.
    """

    import_list = list()
    page_objects_content = os.walk(parent_dir)

    for dirpath, dirnames, filenames in page_objects_content:
        if "__init__.py" in filenames:
            import_list += [os.path.join(dirpath, filename).replace(os.sep, ".").replace(".py", "")
                            for filename in filenames if filenames and
                            filename.endswith(".py") and "__init__.py" not in filename]
    return import_list


def _execute(string_sentence, ldict=None):
    """
    Executes the given sentence as string. If locals are given, this context is used for execuring the sentence.
    :param string_sentence: Python sentence to be executed
    :param ldict: (dict) locals variables given by locals()
    :return: available modules and elements in locals()
    """

    try:
        __logger__.debug("Executing sentence: '%s'", string_sentence)
        exec(string_sentence, globals(), ldict)

    except ImportError:
        __logger__.error("Cannot execute the Python instruction '%s'", string_sentence)
        raise

    return locals()


def _get_page_object_properties(page_object_content):
    """
    Gets custom properties from the PageObject defined in YAML file and tagged as "_properties".
        This function will try to find a special element called "_properties" and will return the content of it.
        After this, the element will be popped out from the content of the PageObject given by params.
    :param page_object_content: (list) PageObject content loaded from YAML file. Example of the list:
              - _Properties_ :
                  Parent          : EditFormPageObject
              - Text        :
                  Name            : form
                  Locator-Type    : ID
                  Locator-Value   : d0f81d3c-d8b0-476b-bcd5-d22ab0153cad
                  Wait-For-Loaded : True
    :return: (dict) The _Properties_ content. The element will be popped out.
    """

    properties = dict()
    for element in page_object_content:
        if PAGE_OBJECT_PROPERTIES_KEY in element:
            properties = element.pop(PAGE_OBJECT_PROPERTIES_KEY)
    return properties


def _copy_from_created(created_page_objects_list, object_name):
    """
    Looks for an already created object with this name and copy the whole object.
    :param object_name: (string) Object name
    :param created_page_objects_list: (list) List of created PageObjects (Toolium PageObjectAutoLoaded)
    :return: Copy of the object that matches with the given name. If there aren't objects matching to the given
        name, return None.
    """

    for object in created_page_objects_list:
        if object.page_name == object_name:
            return copy(object)

    return None


def _import_custom_modules(custom_objects_parent_dir):
    """
    Import custom Python modules from the given directory
    :param custom_objects_parent_dir: (string) Path (directory with Python modules) with custom objects to be imported
    :return:
    """
    # Try to import "custom" PageElement from the given Python directory (path)
    if custom_objects_parent_dir:
        module_list = _get_all_modules_from_parent_dir(custom_objects_parent_dir)
        __logger__.info("Custom modules to be imported: '%s'", module_list)
        for module in module_list:
            try:
                exec_string = "from {} import *".format(module)
                __logger__.debug("Executing sentence: '%s'", exec_string)
                exec exec_string
            except ImportError:
                __logger__.error("Cannot import custom module '%s' from the given directory '%s'",
                                 module, custom_objects_parent_dir)
                raise


def add_attributes_to_page_object(page_element, page_object, custom_page_elements_parent_dir=None):
    """
    Adds to the given page object the defined page elements using the PAGE_ELEMENT_CREATION_PATTERN.
    :param page_element: (dict) Page element loaded from YAML definition.
    :param page_object: (Toolium PageObjectAutoLoaded) PageObject where PageElements are created as attributes
    :param custom_page_elements_parent_dir: (string) Path (directory) with custom PageElements
    :return: None
    """

    # Try to import "custom" PageElement from the given Python directory (path)
    if custom_page_elements_parent_dir:
        module_list = _get_all_modules_from_parent_dir(custom_page_elements_parent_dir)
        __logger__.info("Custom modules to be imported: '%s'", module_list)
        for module in module_list:
            try:
                exec_string = "from {} import *".format(module)
                __logger__.debug("Executing sentence: '%s'", exec_string)
                exec exec_string
            except ImportError:
                __logger__.error("Cannot import the PageElements custom module '%s' in the given directory '%s'",
                                 module, custom_page_elements_parent_dir)
                raise

    for page_element_name in page_element:
        __logger__.debug("Creating element in PageObject '%s'", page_element_name)
        page_element_details = page_element[page_element_name]

        exec_string = PAGE_ELEMENT_CREATION_PATTERN.format(att_name=page_element_details['Name'],
                                                           page_element_name=page_element_name,
                                                           locator_type=page_element_details['Locator-Type'],
                                                           locator_value=page_element_details['Locator-Value'])
        __logger__.debug("Executing sentence: '%s'", exec_string)
        exec exec_string

        if_wait_value = page_element_details['Wait-For-Loaded'] if 'Wait-For-Loaded' in page_element_details else False
        exec_string = PAGE_OBJECT_ATT_IF_WAIT_PATTER.format(att_name=page_element_details['Name'],
                                                            if_wait=if_wait_value)



        __logger__.debug("Executing sentence: '%s'", exec_string)
        exec exec_string


def create_page_objects(page_object_definition_data, custom_page_objects_parent_dir=None,
                        custom_page_elements_parent_dir=None):
    """
    Creates all PageObjects from the specification loaded from YAML file.
        Executes the code instruction defined in PAGE_ELEMENT_CREATION_PATTERN:
        Add the loaded page elements as attributes to the PageObject
    :param page_object_definition_data: (dict) Loaded page object definition from YAML file.
    :param custom_page_objects_parent_dir: (string) Path (python packages) with custom PageObjects
    :param custom_page_elements_parent_dir: (string) Path (python packages) with custom PageElements
    :return: List of created PageObjects (Toolium PageObjectAutoLoaded)
        with all its PageElements (attributes)
    """

    created_page_objects_list = list()

    # Try to import "custom" PageObjects from the given Python directory (path)
    if custom_page_objects_parent_dir:
        module_list = _get_all_modules_from_parent_dir(custom_page_objects_parent_dir)
        __logger__.info("Custom modules to be imported: '%s'", module_list)
        for module in module_list:
            try:
                exec_string = "from {} import *".format(module)
                __logger__.debug("Executing sentence: '%s'", exec_string)
                exec exec_string
            except ImportError:
                __logger__.error("Cannot import the PageObject custom module '%s' in the given directory '%s'",
                                 module, custom_page_objects_parent_dir)
                raise

    second_process_objects = dict()
    for page_object_name in page_object_definition_data:
        __logger__.info("Creating PageObject: '%s'", page_object_name)

        properties = _get_page_object_properties(page_object_definition_data[page_object_name])
        if properties and "BaseObject" in properties:
            # If parent in properties: Create the object based on the given one (inheritance)
            #   if the BaseObject has been imported in the global context (custom PageObject).

            if properties["BaseObject"] in locals():
                exec_string = "page_object = {base}(page_name='{page_name}')".format(base=properties["BaseObject"],
                                                                                     page_name=page_object_name)
                try:
                    __logger__.debug("Executing sentence: '%s'", exec_string)
                    exec exec_string
                except ImportError:
                    __logger__.error("Cannot create the new PageObject '%s' based on '%s'. Sentence: '%s'",
                                     page_object_name, properties["BaseObject"], exec_string)
                    raise
            else:
                # If not in global context but already defined as PageObject (defined only in YAML),
                #    used that object as base for the new one.
                page_object = _copy_from_created(created_page_objects_list, properties["BaseObject"])
                if page_object:
                    page_object.page_name = page_object_name
                elif properties["BaseObject"] in page_object_definition_data:
                        # If the given BaseObject has not been created yet but the PageObject is present in the
                        #  loaded definition list, save the item to be analysed at the end of the process, when
                        #  it is supposed that the referenced BaseObject has already been loaded.
                        __logger__.warn("Found but not created yet. Preparing Object for the Second Process: '%s'",
                                        page_object_name)

                        object_definition_aux = page_object_definition_data[page_object_name]
                        object_definition_aux += [{'_Properties_': {'BaseObject': properties["BaseObject"]}}]
                        second_process_objects.update({page_object_name: page_object_definition_data[page_object_name]})
                        continue
                else:
                    __logger__.error("BaseObject '%s' has not been defined neither as Custom PageObject "
                                     "nor YAML PageObject. Globals: '%s'. Created PageObjects: '%s'",
                                     str(properties["BaseObject"]), str(locals()), str(created_page_objects_list))
                    raise Exception("BaseObject has not been defined neither as Custom PageObject nor YAML PageObject")
        else:
            page_object = PageObjectAutoloaded(page_name=page_object_name)

        for item in page_object_definition_data[page_object_name]:
            add_attributes_to_page_object(item, page_object, custom_page_elements_parent_dir)
        created_page_objects_list.append(page_object)

    for page_object_name in second_process_objects:
        __logger__.info("Second process. Creating PageObject: '%s'", page_object_name)
        __logger__.info("PageDefinition: '%s'", second_process_objects[page_object_name])

        # Second process: BaseObjects that exist in the PageObject definition list but they
        #  weren't created at the moment they were analysed.
        properties = _get_page_object_properties(page_object_definition_data[page_object_name])
        page_object = _copy_from_created(created_page_objects_list, properties["BaseObject"])
        page_object.page_name = page_object_name

        for item in second_process_objects[page_object_name]:
            add_attributes_to_page_object(item, page_object, custom_page_elements_parent_dir)
        created_page_objects_list.append(page_object)

    __logger__.info("PageObjects loaded from YAML file '%s'", created_page_objects_list)

    return created_page_objects_list


def _check_if_object_definition_has_base_object(object_definition):
    """
    If the given Object specification (after being loaded) has a other object as BaseObject.
    :return: True if the specification has other object as "BaseObject"
    """

    found = False
    for element in object_definition:
        if PAGE_OBJECT_PROPERTIES_KEY in element:
            found = True
            break

    return found


def _sort_out_loaded_data_by_base_object(loaded_data):
    """
    This function gets the loaded page objects (from yaml) and sort out by the existence of custom properties.
    This way, all PageObject definitions with custom _Properties_ will be located at the end.
    :param loaded_data: (dict) Loaded data from YAML file
    :return: Sorted out dict.
    """

    return OrderedDict(sorted(loaded_data.items(),
                       key=lambda value: int(_check_if_object_definition_has_base_object(value[1]))))


def load_page_object_definition(path):
    """
    Loads the YAML document/s with the definition of all PageObjects.
    :param path: (string) Path where the page objects definition file/s are located.
        It can be a YAML file or a directory containing some YAML files.
    :return: (dict) Loaded data.
    """

    _init_logger()
    __logger__.info("Reading YAML file: '%s'", path)

    definition_file_list = list()
    if os.path.isfile(path):
        definition_file_list.append(path)
    else:
        for root, dirs, aux_definition_files in os.walk(path, topdown=False):
            definition_file_list += [os.path.join(root, definition_file) for definition_file in aux_definition_files
                                     if ".yml" or ".yaml" in definition_file]

    loaded_data = dict()
    for definition_file in definition_file_list:
        with file(definition_file, 'r') as stream:
            loaded_data.update(load(stream))

    sorted_loaded_data = _sort_out_loaded_data_by_base_object(loaded_data)
    __logger__.debug("Loaded data: %s", sorted_loaded_data)
    return sorted_loaded_data


def get_page_object(created_page_objects_list, page_object_name):
    """
    Retrieve PageObjects definition given the list of available pageobjects and the name of the required one.
    :param created_page_objects_list: (dict) list of Loaded page object definition from YAML file.
    :param page_object_name: (string) name of the required pageObject
    :return: List of created PageObjects (Toolium PageObject) with all its PageElements (attributes)
    """

    current_page_object = None
    for page_object in created_page_objects_list:
        if page_object.page_name == page_object_name:
            current_page_object = page_object
            break

    return current_page_object


def get_element_from_page_object(page_object, element_name, mobile=None):
    """
    Retrieves the given element from the page_object by the element name.
    :param page_object: (PageObjectAutoLoaded) Page object
    :param element_name: Element name following the AutoLoader rules for element names.
    :param platformName: sufix to find elements in specific platform ().
    :return: PageElement
    """

    if hasattr(page_object, 'element_{name}'.format(name=element_name)):
        element = getattr(page_object, 'element_{name}'.format(name=element_name))
    elif hasattr(page_object, '{name}'.format(name=element_name)):
        element = getattr(page_object, '{name}'.format(name=element_name))
    elif mobile and hasattr(page_object, 'element_{name}_{mobile}'.format(name=element_name, mobile=mobile)):
        element = getattr(page_object, 'element_{name}_{mobile}'.format(name=element_name, mobile=mobile))
    else:
        __logger__.error("Attribute 'element_%s' or '%s' can not be found in Page Object", element_name, element_name)
        raise Exception("Attribute 'element_%s' or '%s' can not be found in Page Object" % (element_name, element_name))

    return element

